<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-01T03:34:49.305Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux运维工程师笔试题第十九套</title>
    <link href="http://yoursite.com/2019/07/01/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E9%A2%98%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%A5%97/"/>
    <id>http://yoursite.com/2019/07/01/Linux运维工程师笔试题第十九套/</id>
    <published>2019-07-01T02:31:06.000Z</published>
    <updated>2019-07-01T03:34:49.305Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="试题内容">试题内容</span></h2><ol><li><p>简述一下客户端请求网页里a.css的过程。<br><img src="/images/css5.png" alt="akb48"></p></li><li><p>HTTP 协议中与缓存相关的<code>HTTP Header</code>有哪些?<br>见<a href="https://segmentfault.com/a/1190000014445687?utm_source=index-hottest/*&amp;^%$" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014445687?utm_source=index-hottest/*&amp;^%$</a> 这篇文章吧。</p></li><li><p>SQL语句：<code>update apps set ID=&quot;12345&quot; and NAME=&quot;李四&quot; where ID=&quot;11111&quot; and NAME=&quot;张三&quot;</code>的执行结果是什么？为什么会有这个结果？<br><img src="/images/css6.png" alt="akb48"></p></li></ol><p>mysql官方要求以逗号分隔的<code>col_name=value</code>列表，如果是and的话，题目中的句子实际执行效果是<code>update apps set ID=（&quot;12345&quot; and NAME=&quot;李四&quot;） where ID=&quot;11111&quot; and NAME=&quot;张三&quot;</code>，即括号里的是一个逻辑表达式，但是由于NAME是等于张三而不是李四，于是就等于<code>ID=&quot;12345&quot; and False</code>，即False，在mysql里False等于0。所以出现了这个情况。</p><ol><li><p>接上题，如果要正确达到目的应该怎么写？<br>正确写法是：<code>update apps set Id=&quot;12345&quot;，NAME=&quot;李四&quot; where ID=&quot;11111&quot; and NAME=&quot;张三&quot;</code>，这样才能达到同时修改两个列的目的。</p></li><li><p>POST和GET的区别<br>见<a href="https://www.cnblogs.com/logsharing/p/8448446.html" target="_blank" rel="noopener">https://www.cnblogs.com/logsharing/p/8448446.html</a> 这篇文章吧。</p></li><li><p>如何保证用户鉴权过程是安全的？<br>用户在网页输入用户名A和密码B，对“A+B+有规律的字符串”进行加密得到C，将A和C传递给服务器。由于A是明文的，服务器可根据A去数据库里得到相应的密码B，也用同样的步骤生成D，比较C和D是否相同即可。</p></li><li><p>Lunix如何查看某个进程的线程？<br>两种方法：<br>1）ps -T -p pid  其中spid就是线程号<br>2）top -H -p pid</p></li><li><p>数据库事务隔离级别<br>数据库事务的隔离级别有4个，由低到高依次为<code>Read uncommitted（</code>读未提交） 、<code>Read committed</code>（读提交，SQL和ORACLE的默认规则） 、<code>Repeatable read</code>（重复读，MYSQL默认的） 、<code>Serializable</code>（序列化，效率低但是最准确） ，这四个级别可以逐个解决脏读、不可重复读、幻读这几类问题。</p></li><li><p>将软连接的原文件删除，能否编辑此软连接？会有什么现象？<br>可以通过echo命令编辑此软连接，结果生成名跟原文件一样的文件，inode也一样，但是文件内容已经是echo的新内容了。</p></li><li><p>如何识别此文件是硬链接？<br>使用ll -hit查看文件，如果索引数不是1就是硬链接。</p></li><li><p>数据库延迟同步的语句是什么？<br>一般来说为了防止数据库误操作，都会给一个异地备份数据库配置延迟同步功能，语句如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;stop slave;</span><br><span class="line">mysql&gt;CHANGE MASTER TO MASTER_DELAY = <span class="number">1800</span>；单位为秒</span><br><span class="line">mysql&gt;start slave;</span><br></pre></td></tr></table></figure></li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/kaiye/kaiye.github.com/issues/3" target="_blank" rel="noopener">https://github.com/kaiye/kaiye.github.com/issues/3</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2&gt;&lt;span id=&quot;试题内容&quot;&gt;试题内容&lt;/span&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简述一下客户端请求网页里a.css的过程。&lt;br&gt;&lt;img src=&quot;/images
      
    
    </summary>
    
      <category term="大牛之路" scheme="http://yoursite.com/categories/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="大牛之路" scheme="http://yoursite.com/tags/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Proxysql添加后端SSL加密</title>
    <link href="http://yoursite.com/2019/06/28/Proxysql%E6%B7%BB%E5%8A%A0%E5%90%8E%E7%AB%AFSSL%E5%8A%A0%E5%AF%86/"/>
    <id>http://yoursite.com/2019/06/28/Proxysql添加后端SSL加密/</id>
    <published>2019-06-28T02:45:53.000Z</published>
    <updated>2019-07-01T02:30:23.333Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="配置正文">配置正文</span></h2><p>安全部门最近放出了新需求，要数据库流量实现内网加密。即<code>mysql&lt;-----&gt;proxysql</code>之间是加密的，这里记录整个配置过程，安装部分可以移步去看 <a href="https://rorschachchan.github.io/2019/05/31/%E8%AE%B0%E5%BD%95%E9%83%A8%E7%BD%B2ProxySql%E7%9A%84%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener">https://rorschachchan.github.io/2019/05/31/%E8%AE%B0%E5%BD%95%E9%83%A8%E7%BD%B2ProxySql%E7%9A%84%E8%BF%87%E7%A8%8B/</a> 这篇文章。</p><p>首先登陆阿里云控制台RDS，选择对应的数据库—数据安全性—SSL，点击<code>开通</code>，如图：<br><img src="/images/proxy27.png" alt="akb48"></p><font color="red">注意！此项举动会重启数据库，所以线上环境请慎重！</font><p>在配置的时候，同时下载CA证书，上传到proxysql所在的服务器的<code>/var/lib/proxysql/</code>里。解压缩之，发现压缩包里是三个文件，如图：<br><img src="/images/proxy28.png" alt="akb48"></p><p>我们主要用的是<code>ApsaraDB-CA-Chain.pem</code>这个文件（如果是读写库，那么这个pem的文件是一模一样的）。</p><p>如果数据库开通ssl成功，那么在阿里云的控制台上是显示为“已开通”，在mysql命令行里使用<code>show global variables like &#39;%ssl%&#39;;</code>查看如下：<br><img src="/images/proxy30.png" alt="akb48"></p><p>登录proxysql，查看当前链接mysql情况，如图：<br><img src="/images/proxy29.png" alt="akb48"></p><p>发现里面的<code>use_ssl</code>是0，所以<code>update mysql_servers set use_ssl=1;</code>将他们改成1。</p><p>然后<code>set mysql-ssl_p2s_ca = &#39;/var/lib/proxysql/ApsaraDB-CA-Chain.pem&#39;;</code>设定CA证书所在路径。随后就是<code>load mysql variables to runtime;</code>和<code>save mysql variables to disk;</code>，保存之后使用<code>select * from runtime_global_variables;</code>查看：<br><img src="/images/proxy31.png" alt="akb48"></p><p>验证的方法也很简单，在对应数据库里操作的同时<code>tcpdump -s 0 -i any -v port 3306 -w /root/test.pcap</code> 抓一下包看一下里面的内容是否加密了就行。</p><p>补充：虽然SSL方式使得安全性提高了，但是相对地使得QPS也降低23%左右。所以要谨慎选择：</p><ol><li>对于非常敏感核心的数据，或者QPS本来就不高的核心数据，可以采用SSL方式保障数据安全性；</li><li>对于采用短链接、要求高性能的应用，或者不产生核心敏感数据的应用，性能和可用性才是首要，建议不要采用SSL方式；</li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/sysown/proxysql/wiki/SSL-Support" target="_blank" rel="noopener">https://github.com/sysown/proxysql/wiki/SSL-Support</a><br><a href="https://googlebaba.io/mysqlcookbook/7.aboutssl.html" target="_blank" rel="noopener">https://googlebaba.io/mysqlcookbook/7.aboutssl.html</a></p><p><img src="/images/DH12-2.gif" alt="akb48" title="2009年东部半决赛魔术VS骑士"></p>]]></content>
    
    <summary type="html">
    
      以通配符（%）开始的like字符串，走索引。比如like %aaa%会使用索引，而like aaa%不会
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="读写分离" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="proxysql" scheme="http://yoursite.com/tags/proxysql/"/>
    
      <category term="ssl加密" scheme="http://yoursite.com/tags/ssl%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-Playbook判断进程是否存在</title>
    <link href="http://yoursite.com/2019/06/27/Ansible-Playbook%E5%88%A4%E6%96%AD%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/"/>
    <id>http://yoursite.com/2019/06/27/Ansible-Playbook判断进程是否存在/</id>
    <published>2019-06-27T13:57:14.000Z</published>
    <updated>2019-06-28T09:03:14.067Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="正文">正文</span></h2><p>部署有一个需求，要将所有的模块服务器里添加一个叫agentmizar的日志采集模块。但是有一些服务器提前有部署过，那么判断一下如果服务器里有此进程就跳过，如果没有此进程就传包并修改配置文件然后启动。</p><p>与playbook搭配的yaml内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all<span class="comment">#默认执行hosts里的所有IP</span></span><br><span class="line">  remote_user: root</span><br><span class="line">  any_errors_fatal: no</span><br><span class="line">  gather_facts: no<span class="comment">#不采集对方机器的数据，提高执行速度</span></span><br><span class="line">  serial:</span><br><span class="line">  - <span class="number">5</span><span class="comment">#5台机器一组</span></span><br><span class="line">  tasks:</span><br><span class="line">  - name: judge agent process <span class="keyword">is</span> exits</span><br><span class="line">    shell: ps -aux | grep agent</span><br><span class="line">    ignore_errors: <span class="keyword">True</span><span class="comment">#如果命令执行不成功，即 echo $?不为0，则在其语句后面的ansible语句不会被执行，导致整个程序中止。</span></span><br><span class="line">    register: result</span><br><span class="line"></span><br><span class="line">  - name: agent <span class="keyword">is</span> running</span><br><span class="line">    shell: echo <span class="string">"agent is running"</span></span><br><span class="line">    when: result.stdout.find(<span class="string">'agent.conf'</span>) != <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  - name: agent dir <span class="keyword">is</span> exits</span><br><span class="line">    shell: ls /opt/agentmizar</span><br><span class="line">ignore_errors: <span class="keyword">True</span></span><br><span class="line"> register: dirresult</span><br><span class="line"></span><br><span class="line">  - name: copy packages</span><br><span class="line">    copy:</span><br><span class="line">      src: /tmp/agentmizar.zip</span><br><span class="line">      dest: /opt</span><br><span class="line">      owner: root</span><br><span class="line">    when: dirresult <span class="keyword">is</span> failed<span class="comment">#如果文件夹存在就是dirresult is succeeded</span></span><br><span class="line"> </span><br><span class="line">  - name: unzip agentmizar</span><br><span class="line">    unarchive:</span><br><span class="line">      <span class="comment">#extra_opts: -j#将zip里的所有递归文件都放到本目录</span></span><br><span class="line">      src: /opt/agentmizar.zip</span><br><span class="line">      dest: /opt  </span><br><span class="line">      remote_src: yes </span><br><span class="line">    when: result.stdout.find(<span class="string">'agent.conf'</span>) == <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  - name: backup old <span class="keyword">and</span> unpack new package</span><br><span class="line">    shell: cp -rf /opt/build/* /opt/<span class="comment">#由于zip包也解压缩出来是一个build文件夹，需要再扒一层</span></span><br><span class="line">    when: result.stdout.find(<span class="string">'agent.conf'</span>) == <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  - name: update agent.conf</span><br><span class="line">    lineinfile:</span><br><span class="line">      dest: /opt/agentmizar/agent.conf</span><br><span class="line">      regexp: <span class="string">"kafka = 192.168.0.1:9092,192.168.0.2:9092,192.168.0.3:9092"</span><span class="comment">#修改配置文件</span></span><br><span class="line">      line: <span class="string">"kafka = 172.0.10.1:9092"</span></span><br><span class="line">    when: result.stdout.find(<span class="string">'agent.conf'</span>) == <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  - name: start agentmizar</span><br><span class="line">    shell: cd /opt/agentmizar/ &amp;&amp; /bin/bash /opt/agentmizar/start_agent.sh</span><br><span class="line">    when: result.stdout.find(<span class="string">'agent.conf'</span>) == <span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p>这个yaml，我执行<code>ps -aux | grep agent</code>，并将结果存储到<code>result</code>这个<code>register</code>里。然后从<code>register</code>里去find关键字<code>agent.conf</code>，如果不存在就返回-1，那么可以判断当前机器里没有agentmizar进程。</p><p>如果说进程是一个守护进程，那么在判断进程（比如是systemctl status apache2）是否存在可以这么写：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- name: Check <span class="keyword">if</span> Apache <span class="keyword">is</span> running</span><br><span class="line">  command: systemctl status apache2</span><br><span class="line">  ignore_errors: yes</span><br><span class="line">  changed_when: false</span><br><span class="line">  register: service_apache_status</span><br><span class="line"></span><br><span class="line">- name: Report status of Apache</span><br><span class="line">  fail:</span><br><span class="line">    msg: |</span><br><span class="line">      Service apache2 <span class="keyword">is</span> <span class="keyword">not</span> running.</span><br><span class="line">      Output of `systemctl status apache2`:</span><br><span class="line">      &#123;&#123; service_apache_status.stdout &#125;&#125;</span><br><span class="line">      &#123;&#123; service_apache_status.stderr &#125;&#125;</span><br><span class="line">  when: service_apache_status | failed</span><br></pre></td></tr></table></figure></p><p>注意！如果when条件判断句中有变量的话要将用（）来括变量，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">when: ansible_default_ipv4.address == &#123;&#123; ETCD_NODE03 &#125;&#125;<span class="comment">#错误写法</span></span><br><span class="line">when: ansible_default_ipv4.address == (ETCD_NODE03)<span class="comment">#正确写法</span></span><br></pre></td></tr></table></figure></p><p>再注意！<code>register</code>变量的命名不能用-（中横线），比如<code>dev-sda6_result</code>，则会被解析成<code>sda6_result</code>，dev会被丢掉！</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.ibm.com/developerworks/cn/linux/1608_lih_ansible/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/1608_lih_ansible/index.html</a><br><a href="https://blog.51cto.com/liuzhengwei521/1962382" target="_blank" rel="noopener">https://blog.51cto.com/liuzhengwei521/1962382</a>    （条件判断）<br><img src="/images/DH12-1.gif" alt="akb48" title="2009年东部半决赛魔术VS骑士"></p>]]></content>
    
    <summary type="html">
    
      如果遇到文件模式是dos的话，执行set ff=unix即可。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="批量部署" scheme="http://yoursite.com/tags/%E6%89%B9%E9%87%8F%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Python端口探测脚本</title>
    <link href="http://yoursite.com/2019/06/25/Python%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/06/25/Python端口探测脚本/</id>
    <published>2019-06-25T14:22:23.000Z</published>
    <updated>2019-06-26T03:55:31.587Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>有一个模块最近总是假死，假死的现象就是进程还在但是端口（9030端口）已经不工作了。于是就需要写一个端口探测脚本，发现该端口一旦无法正常收到信息，就重启此模块。</p><p>由于此模块是一个五台机器的集群，我这次没有在五台机器都跑一样的脚本，而是在一个可以免密码ssh到他们的机器上写了一个脚本，让这个机器去探测对应的端口。模式如图：<br><img src="/images/yum5.png" alt="akb48"></p><p>先创建一个<code>detect.conf</code>如下，他的格式是yaml，所以不要用tab用空格：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">    Name: localhost</span><br><span class="line">    IP: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    Port: <span class="number">9030</span></span><br><span class="line">---</span><br><span class="line">    Name: mrs<span class="number">-05</span></span><br><span class="line">    IP: <span class="number">10.0</span><span class="number">.1</span><span class="number">.14</span></span><br><span class="line">    Port: <span class="number">9030</span></span><br><span class="line">---</span><br><span class="line">    Name: mrs<span class="number">-04</span></span><br><span class="line">    IP: <span class="number">10.0</span><span class="number">.1</span><span class="number">.13</span></span><br><span class="line">    Port: <span class="number">9030</span></span><br><span class="line">---</span><br><span class="line">    Name: mrs<span class="number">-03</span></span><br><span class="line">    IP: <span class="number">10.0</span><span class="number">.1</span><span class="number">.12</span></span><br><span class="line">    Port: <span class="number">9030</span></span><br><span class="line">---</span><br><span class="line">    Name: mrs<span class="number">-02</span></span><br><span class="line">    IP: <span class="number">10.0</span><span class="number">.1</span><span class="number">.11</span></span><br><span class="line">    Port: <span class="number">9030</span></span><br></pre></td></tr></table></figure></p><p>脚本<code>detect.py</code>内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 作者：ChrisChan</span></span><br><span class="line"><span class="comment"># 用途：Python3.6脚本，检测IP端口连接是否正常,建议放在单独的机器里进行端口扫描，此脚本需要搭配同目录下的detect.conf使用。</span></span><br><span class="line"><span class="comment"># 请先pip install PyYaml,pip install paramiko</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh秘钥地址</span></span><br><span class="line">key_filename = <span class="string">"秘钥地址,即id_rsa"</span></span><br><span class="line"><span class="comment"># 重启进程命令</span></span><br><span class="line">command = <span class="string">"具体的进程启动命令"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_open</span><span class="params">(ip, port)</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.connect((ip, int(port)))</span><br><span class="line">        s.shutdown(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssh</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ssh.connect(ip, <span class="number">22</span>, <span class="string">"appuser"</span>, key_filename=key_filename)<span class="comment">#这里写死了22端口和appuser用户</span></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'私钥文件不存在！'</span>)</span><br><span class="line">    <span class="keyword">except</span> AuthenticationException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'私钥不正确，请检查对应用户或私钥内容！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">        print(stdout.readlines())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    input = open(<span class="string">'detect.conf'</span>, <span class="string">'r'</span>)    <span class="comment"># 这里是pyyaml 5.1的新格式</span></span><br><span class="line">    ys = yaml.load_all(input, Loader=yaml.FullLoader)</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> ys:</span><br><span class="line">        host = y[<span class="string">"IP"</span>]<span class="comment">#从yaml里取值</span></span><br><span class="line">        port = y[<span class="string">"Port"</span>]</span><br><span class="line">        <span class="keyword">if</span> is_open(host, port):</span><br><span class="line">            print(y[<span class="string">"Name"</span>] + <span class="string">" is OK"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(y[<span class="string">"Name"</span>] + <span class="string">" is NO"</span>)</span><br><span class="line">            ssh(host)</span><br><span class="line">            print(<span class="string">"Process is started!"</span>)</span><br></pre></td></tr></table></figure></p><p>内网探测效果还不错，如果时间耗时比较长，就放弃for循环，走多进程路线更佳！<br><img src="/images/yum6.png" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      想查看文件里隐藏文件的大小，使用命令:du -sh * .[^.]*
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>使用Alpine当基础镜像的坑</title>
    <link href="http://yoursite.com/2019/06/24/%E4%BD%BF%E7%94%A8Alpine%E5%BD%93%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2019/06/24/使用Alpine当基础镜像的坑/</id>
    <published>2019-06-24T09:09:32.000Z</published>
    <updated>2019-06-26T14:41:58.431Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="踩坑正文">踩坑正文</span></h2><p>今天部署开发要上一个新模块，此模块已经通过golang编译好的，而且在本地机器可以正常启动，现在需要将其容器化—-制作一个镜像，然后在根据这个镜像启动程序。</p><p>本着基础镜像最小的原则，就选择了<code>alpine:latest</code>。先创建一个干净的alpine镜像挂载模块所在的文件夹，然后<code>docker exec</code>进去执行启动脚本。发现启动脚本里涉及到了<code>cpulimit</code>、<code>rpm</code>、<code>ps -p</code>、 <code>sudo</code>等alpine非自带命令所以无法启动。alpine安装模块的命令即非<code>yum</code>又非<code>apt-get</code>，而是<code>apk add</code>，于是在Dockerfile里添加一句：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN apk add cpulimit &amp;&amp; apk add rpm &amp;&amp; apk add sudo &amp;&amp; apk --update add procps</span><br></pre></td></tr></table></figure></p><p>新镜像制作完毕，进去启动还是失败。具体表现是<code>./启动脚本</code>的时候报<code>&quot;no such file or directory&quot;</code>，开始我以为是因为alpine没有<code>/bin/bash</code>的缘故，把所有的shebang都改成了<code>/bin/sh</code>。但是发现启动的时候报格式错误，我想到这是一个go编译好的脚本，那么<code>./</code>就应该可以直接启动的。后来在<a href="https://github.com/gin-gonic/gin/issues/1178" target="_blank" rel="noopener">https://github.com/gin-gonic/gin/issues/1178</a> 里查到原来alpine里是没有稳定的libc，所以还要添加<code>libc6-compat</code>和<code>libstdc++</code>。</p><p>在镜像里<code>apk add libc6-compat &amp;&amp; apk add libstdc++</code>之后，发现启动脚本还有这样一句话：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'./core_%e.%p'</span> | sudo tee /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure></p><p>这个命令是无法执行的，因为docker里<code>/proc/sys/kernel/core_pattern</code>是只读文件，自然无法进行修改。但是宿主机上的这个文件是root用户可以修改的。这可怎么办？</p><p>我开始想既然宿主机的<code>/proc/sys/kernel/core_pattern</code>可以修改，那么就把宿主机的<code>/proc/sys/kernel/core_pattern</code>挂载给镜像不就得了？但是在执行的时候会报错：<code>cannot be mounted because it is located inside “/proc”</code>，因为Docker不允许在<code>proc</code>目录下随意挂文件，如果你有信心可以通过修改docker的源码来实现挂载的效果。</p><p>但是我觉得还是沉稳为上，于是就想出一个办法：在docker run的时候添加<code>--privileged</code>，这样容器获得了额外的特权可以对系统变量的值进行修改。但是要注意如果容器发生了重启，那么值会恢复成原样，即无法持久化。不过在启动脚本里已经有了echo语句，这样每一次执行启动脚本都会更改<code>/proc/sys/kernel/core_pattern</code>，于是就不用太担心这个问题了。</p><p>最后完整的Dockerfile如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line">MAINTAINER ChrisChan &lt;<span class="number">33664</span>@dahuatech.com&gt;</span><br><span class="line"></span><br><span class="line">RUN apk update &amp;&amp; apk add libc6-compat &amp;&amp; apk add libstdc++ &amp;&amp; apk add cpulimit &amp;&amp; apk add rpm &amp;&amp; apk add sudo &amp;&amp; apk --update add procps</span><br><span class="line">RUN mkdir -p /mnt/agentmizar<span class="comment">#agentmizar这个就是工作的模块名</span></span><br><span class="line">WORKDIR /mnt/agentmizar<span class="comment">#设定工作目录</span></span><br><span class="line">CMD [<span class="string">"sh"</span>, <span class="string">"control"</span>, <span class="string">"start"</span>]<span class="comment">#启动之</span></span><br></pre></td></tr></table></figure></p><p>创建完镜像之后，启动语句如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 容器名 -dit  -v /opt/:/opt/:ro -v /etc/localtime:/etc/localtime:ro --privileged 镜像名<span class="comment">#别忘了对准时间</span></span><br></pre></td></tr></table></figure></p><p>补充一句，最后镜像大小不到50MB。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/qq_41980563/article/details/88876874" target="_blank" rel="noopener">https://blog.csdn.net/qq_41980563/article/details/88876874</a><br><a href="https://serverfault.com/questions/883625/alpine-shell-cant-find-file-in-docker" target="_blank" rel="noopener">https://serverfault.com/questions/883625/alpine-shell-cant-find-file-in-docker</a><br><a href="https://sq.163yun.com/blog/article/155817999160799232" target="_blank" rel="noopener">https://sq.163yun.com/blog/article/155817999160799232</a></p>]]></content>
    
    <summary type="html">
    
      卷扩容时使用resize2fs出现Bad magic number in super-block while trying to open的错误，可使用xfs_growfs破之
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>研究一下Zabbix 3.4的服务主动发现功能</title>
    <link href="http://yoursite.com/2019/06/21/%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BZabbix-3-4%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%BB%E5%8A%A8%E5%8F%91%E7%8E%B0%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/06/21/研究一下Zabbix-3-4的服务主动发现功能/</id>
    <published>2019-06-21T09:24:11.000Z</published>
    <updated>2019-06-24T03:02:11.431Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>我所在组一直以来对不同服务的监控方针是：针对不同的服务（比如nginx,tomcat,mysql等等）创建不同的template，然后将这个template应用于对应的服务器上，在每一个template里添加具体的item和trigger。今天尝试一下全新的自动发现<code>Low-level discovery</code>（LLD）。</p><p>LLD对返回的内容有一个json格式，这个json格式必须要被<code>zabbix-server</code>识别。所以我们需要准备一个脚本，脚本的结果就是生成这个json。本文<code>zabbix-server</code>和<code>zabbix-agent</code>的版本都是<code>3.4.15</code>。</p><h2><span id="服务器内部操作">服务器内部操作</span></h2><p>首先在被监控服务器里，创建一个脚本<code>/etc/zabbix/script/discovery_services.sh</code>，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">proarray=($(find /var/run/ -name <span class="string">"*.pid"</span>|egrep -v <span class="string">'(rpc|php_daemon|haldaemon|irqbalance|console-kit-daemon)'</span> |awk -F<span class="string">'/'</span> <span class="string">'&#123;print $NF&#125;'</span>|awk -F<span class="string">'.'</span> <span class="string">'&#123;print $1&#125;'</span>))    <span class="comment"># 排除不监控的服务</span></span><br><span class="line"></span><br><span class="line">length=$&#123;<span class="comment">#proarray[@]&#125;#$&#123;#var&#125;是用来取长度</span></span><br><span class="line">printf <span class="string">"&#123;\n"</span></span><br><span class="line">printf  <span class="string">'\t'</span><span class="string">"\"data\":["</span></span><br><span class="line">printf <span class="string">"\t"</span></span><br><span class="line">printf <span class="string">'\n\t\t&#123;'</span></span><br><span class="line">printf <span class="string">"\"&#123;#PRO_NAME&#125;\":\"iptables\"&#125;"</span>       <span class="comment">#必须要添加的iptables</span></span><br><span class="line">printf  <span class="string">","</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;$length;i++))</span><br><span class="line">do</span><br><span class="line">        printf <span class="string">'\n\t\t&#123;'</span></span><br><span class="line">        printf <span class="string">"\"&#123;#PRO_NAME&#125;\":\"$&#123;proarray[$i]&#125;\"&#125;"</span><span class="comment">#for循环取每一项</span></span><br><span class="line">        <span class="keyword">if</span> [ $i -lt $[$length<span class="number">-1</span>] ];then</span><br><span class="line">                printf <span class="string">','</span></span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">printf  <span class="string">"\n\t]\n"</span></span><br><span class="line">printf <span class="string">"&#125;\n"</span></span><br></pre></td></tr></table></figure></p><p>这里我们设定将所有的进程文件的pid统一放到/var/run下，这样能取到所有进程的文件。脚本里的<code>{PRO_NAME}</code>这个就是自动发现规则中的宏变量，另外这个脚本返回的是符合<code>zabbix-server</code>的json格式。如图：<br><img src="/images/LLD7.png" alt="akb48"></p><p>同时在加上一个判断进程是否运行的脚本<code>/etc/zabbix/script/program_status.sh</code>，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">procjetName=<span class="string">"$&#123;1:-NULL&#125;"</span></span><br><span class="line">LOCK_PATH=<span class="string">"/var/lock/subsys"</span>     </span><br><span class="line">RUN_PATH=<span class="string">"/var/run"</span></span><br><span class="line">ret_ok=<span class="number">1</span></span><br><span class="line">ret_critical=<span class="number">3</span></span><br><span class="line">ret_unknown=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  [[ $&#123;procjetName&#125; == <span class="string">"NULL"</span> ]] ; then</span><br><span class="line">        echo $&#123;ret_unknown&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"$&#123;LOCK_PATH&#125;/$&#123;procjetName&#125;"</span> ] || [ -f <span class="string">"$&#123;RUN_PATH&#125;/$&#123;procjetName&#125;.pid"</span> ]  || [ -f <span class="string">"$&#123;RUN_PATH&#125;/$&#123;procjetName&#125;/$&#123;procjetName&#125;.pid"</span> ] ; then</span><br><span class="line">        echo $&#123;ret_ok&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        echo $&#123;ret_critical&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>这个脚本的结果就是：服务若存在就返回1，否则返回3。如图：<br><img src="/images/LLD8.png" alt="akb48"></p><p>然后在<code>zabbix_agentd.conf</code>里添加两个<code>items</code>，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=services.scan,/bin/bash /etc/zabbix/script/discovery_services.sh</span><br><span class="line">UserParameter=services.status[*],/bin/bash /etc/zabbix/script/program_status.sh $<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>服务端操作到此结束。</p><h2><span id="web端操作">WEB端操作</span></h2><p>添加自动发现规则与添加item很相似，先<code>configuation</code>—<code>templates</code>—<code>create template</code>:<br><img src="/images/LLD1.png" alt="akb48"></p><p><img src="/images/LLD2.png" alt="akb48"></p><p>在新生成的“服务进程自动发现”的template里添加<code>Discovery rules</code>，设定Key是<code>Services.scan</code>如下：<br><img src="/images/LLD3.png" alt="akb48"></p><p>上面那个<code>Services.scan</code>到时候要写到<code>zabbix-agent.conf</code>里的，切记保持一模一样。然后在点击Filters标签页，如下：<br><img src="/images/LLD4.png" alt="akb48"></p><p>此处的<code>{PRO_NAME}</code>就是我们的脚本返回的变量，保存之。然后创建一个<code>item prototypes</code>，如图：<br><img src="/images/LLD5.png" alt="akb48"></p><p>此处需要注意的<code>$1</code>和<code>键值</code>是我们之前定义的，也即是服务名，保存之。</p><p>然后创建一个<code>trigger prototype</code>，如图：<br><img src="/images/LLD6.png" alt="akb48"></p><p>图中的解释器是：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;auto Service discovery:services.status[&#123;<span class="comment">#PRO_NAME&#125;].last()&#125;&lt;&gt;1) and (&#123;auto Service discovery:services.status[&#123;#PRO_NAME&#125;].last(,1h)&#125;=1)</span></span><br></pre></td></tr></table></figure></p><p>这句话的意思是“最后状态不是1同时一小时前的状态是1”的服务出现了问题会发生报警，这主要是因为当启动一些临时进程，比如yum，当yum完毕了之后，进程就不存在了，那么如果只是通过判断进程数的话，就会报<code>yum is down</code>。</p><p>至此web端配置结束。</p><h2><span id="错误解决">错误解决</span></h2><p>如果web界面出现了<code>Value should be a JSON object.</code>的错误，如图：<br><img src="/images/LLD9.png" alt="akb48"></p><p>跑到zabbix-server去zabbix-get一下发现有错误：<br><img src="/images/LLD10.png" alt="akb48"></p><p>将mdadm这个文件夹改成755即可。回到web页面查看一下<code>latest data</code>:<br><img src="/images/LLD11.png" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/discovery/low_level_discovery" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/zh/manual/discovery/low_level_discovery</a><br><a href="https://www.xiaomastack.com/2015/07/04/zabbix-auto-tcp-port/" target="_blank" rel="noopener">https://www.xiaomastack.com/2015/07/04/zabbix-auto-tcp-port/</a><br><a href="https://www.cnblogs.com/fengbohello/p/5954895.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengbohello/p/5954895.html</a> （Linux Shell 截取字符串）<br><a href="http://caosiyang.github.io/2017/03/06/zabbix-get-value-error/" target="_blank" rel="noopener">http://caosiyang.github.io/2017/03/06/zabbix-get-value-error/</a></p>]]></content>
    
    <summary type="html">
    
      AWS的工单反馈与阿里云真是天差地别
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>网易雷火运维面试全纪录</title>
    <link href="http://yoursite.com/2019/06/20/%E7%BD%91%E6%98%93%E9%9B%B7%E7%81%AB%E8%BF%90%E7%BB%B4%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/06/20/网易雷火运维面试记录/</id>
    <published>2019-06-20T06:12:57.000Z</published>
    <updated>2019-06-28T12:45:08.442Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="电话一面">电话一面</span></h2><ol><li><p>都搞过什么linux的发行版，区别是啥？</p></li><li><p>为什么云服务器普遍不装swap？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小内存主机由于内存不足导致持续swapping后会严重影响存储设备的IO性能。其实如果需要使用swap的话，主机性能也已经是烂的一塌糊涂，根本不能满足使用了，建议增加内存为上。</span><br></pre></td></tr></table></figure></li><li><p>localhost与127.0.0.1的区别</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhot（local）是不经网卡传输！这点很重要，它不受网络防火墙和网卡相关的的限制。<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>是通过网卡传输，依赖网卡，并受到网络防火墙和网卡相关的限制。</span><br></pre></td></tr></table></figure></li><li><p>iptables的四表五链是啥？</p></li><li><p>出现延迟都有原因？</p></li><li><p>如何把数据库恢复到指定时刻？</p></li><li><p>你从业以来参与的比较大的故障是什么？怎么解决的？</p></li><li><p>如果要大量insert数据到数据库，有什么优化的方法？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)一条SQL语句插入多条数据:比如一次insert插入多个values，INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class="line">   VALUES (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, <span class="number">0</span>), (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, <span class="number">1</span>);</span><br><span class="line">这样的好处是减少binlog和innodb的日质量，降低了日志刷盘的频率提高效率，同时减少了网络传输的IO，这个优化效果特别明显；</span><br><span class="line"><span class="number">2</span>）把多一个insert写成一个事务，进行一个insert操作时，MySQL内部会建立一个事务，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗，所有插入都在执行后才进行提交操作；</span><br><span class="line"><span class="number">3</span>）数据按照主键有序插入，因为数据库插入时，需要维护索引数据，无序的记录会增大维护索引的成本，不过这个方法提高的并不明显；</span><br><span class="line"><span class="number">4</span>）以上方法综合使用；</span><br></pre></td></tr></table></figure></li></ol><h2><span id="电话二面">电话二面</span></h2><ol><li><p>介绍一下你自己</p></li><li><p>使用docker遇到了什么坑？</p></li><li><p>docker的网络模式有哪些？为什么不能选hosts？</p></li><li><p>服务器调整进程优先级的命令是啥？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一般来说微服务（即一个云服务器只跑一个进程）的场景来说，这个问题很少遇到，但是实际很多公司是一个服务器（比如<span class="number">80</span>核<span class="number">160</span>G）跑多个进程，那么对后台的程序有优先级限制就要使用`nice`命令。</span><br><span class="line">Linux系统中，进程有<span class="number">-19</span>到<span class="number">19</span>这<span class="number">39</span>个优先级。<span class="number">-19</span>最优先，<span class="number">19</span>最不优先。进程的默认优先级为<span class="number">0</span>。如果希望将进程调整为最优先，则将进程的nice值设置为<span class="number">-19</span>；如果希望进程最不优先，占用最少的系统CPU时间，则将其设置为<span class="number">19</span>。</span><br><span class="line"></span><br><span class="line">修改已经存在的进程的优先级</span><br><span class="line">将PID为<span class="number">1799</span>的进程优先级设置为最低（<span class="number">19</span>）：renice <span class="number">19</span> <span class="number">1799</span></span><br><span class="line">将PID为<span class="number">1799</span>的进程优先级设置为最高（<span class="number">-19</span>）：renice <span class="number">-19</span> <span class="number">1799</span></span><br><span class="line"></span><br><span class="line">新建进程并设置优先级</span><br><span class="line">nice <span class="number">-19</span> tar zcf pack.tar.gz documents<span class="comment">#这里-19并不是最高优先级，而是最低优先级，要设定最高优先级是--19</span></span><br></pre></td></tr></table></figure></li><li><p>python的==和is有什么不同？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">is</span>比较的是id是不是一样，==比较的是值是不是一样。</span><br></pre></td></tr></table></figure></li><li><p>如何删除某文件下所有名称带有空格的文件？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过转义符，或者获取文件的PID，根据PID删除对应的文件</span><br><span class="line">比如想rm文件名为“my file”的文件可以用rm my\ file</span><br></pre></td></tr></table></figure></li><li><p>ansibleplaybook的回滚方法？</p></li><li><p>如果nginx的server设置了add header，同时子location也设置了add header，那么会有什么现象？</p></li><li><p>如何判断查询是否用到了索引？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用explain，如果type类型是all就是没有用到索引，如果是其他具体类型就是用到了索引。</span><br><span class="line">索引依次从好到差：system，const，eq_ref，ref，fulltext，ref_or_null，unique_subquery，index_subquery，range，index_merge，index，ALL，除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引。</span><br></pre></td></tr></table></figure></li></ol><h2><span id="现场技术一面">现场技术一面</span></h2><ol><li><p>写一下Python序列循环移位的方法，原来是[1,2,3,4,5,6]，变成[3,4,5,6,1,2]，任意语言都可以。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用切片，简单易理解，速度最快，可同时实现循环左移（k&gt;<span class="number">0</span>）和右移（k&lt;<span class="number">0</span>）。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(lst, k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> lst[k:] + lst[:k]</span><br></pre></td></tr></table></figure></li><li><p>你们平时备份mysql使用什么方法？为什么用这个开源软件？</p></li><li><p>服务器你们是如何初始化的？</p></li><li><p>简单的介绍一下python的生成器？</p></li><li><p>如果发现慢sql你怎么排查？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>剩下的就是一些流程性的问题了。</p>]]></content>
    
    <summary type="html">
    
      这个世界总会有一些莫名其妙的拒绝
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="大牛之路" scheme="http://yoursite.com/tags/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>XtraBackup的安装和使用</title>
    <link href="http://yoursite.com/2019/06/17/XtraBackup%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/17/XtraBackup的安装和使用/</id>
    <published>2019-06-17T02:37:56.000Z</published>
    <updated>2019-06-17T12:56:31.275Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>XtraBackup是数据库物理备份工具，是阿里云RDS备份数据库的组件。它的优点是热备而且速度快，效率比mysqldump不知道高到哪里去了。它的备份原理如下:</p><ol><li>innobackupex首先会启动一个xtrabackup_log后台检测的进程，实时检测mysql的redo log的变化，一旦发现redo有新的日志写入，立刻将日志写入到日志文件xtrabackup_log中。</li><li>物理拷贝innodb的数据文件和系统表空间文件idbdata1到对应的以默认时间戳为备份目录的地方</li><li>复制结束后，执行<code>flush table with read lock</code>操作进行全库锁表准备备份非InnoDB文件</li><li>复制.frm .myd .myi等非InnoDB引擎文件</li><li>查看binary log 的位置</li><li>解锁unlock tables</li><li>停止xtrabackup_log进程</li></ol><p><img src="/images/xtrabackup2.png" alt="akb48"></p><h2><span id="安装与全量备份">安装与全量备份</span></h2><p>先去<a href="https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/" target="_blank" rel="noopener">https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/</a> 下载2.4版本的XtraBackup，虽然最新的版本是<code>8.0.6</code>，但是据说它只支持mysql8.0和percona8.0…<br><img src="/images/xtrabackup.png" alt="akb48"></p><p>安装步骤如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@share ~]<span class="comment">#yum install -y cmake libaio-devel</span></span><br><span class="line">[root@share ~]<span class="comment">#yum install glibc glibc-devel glibc-static</span></span><br><span class="line">[root@share ~]<span class="comment"># rpm -ivh percona-xtrabackup-24-2.4.14-1.el6.x86_64.rpm </span></span><br><span class="line">warning: percona-xtrabackup<span class="number">-24</span><span class="number">-2.4</span><span class="number">.14</span><span class="number">-1.</span>el6.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID <span class="number">8507</span>efa5: NOKEY</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   <span class="number">1</span>:percona-xtrabackup<span class="number">-24</span><span class="number">-2.4</span><span class="number">.14</span><span class="number">-1.</span>el<span class="comment">################################# [100%]</span></span><br><span class="line">[root@share ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>安装完毕之后，就可以<code>innobackupex --host=127.0.0.1 --user=root --password=数据库密码 --defaults-file=/etc/mysql/my.cnf /备份的文件夹名</code>来备份数据库。同时备份结束之后会生成一个LSN号，在增量备份时候，就只备份大于此号的数据页。</p><p>如果有了备份文件想要全量恢复的话，就是如下操作：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scp -r /backup/备份文件夹/ 另一个mysqlIP:/backup/<span class="comment">#先将本机的备份文件夹拷贝到其他服务器里去</span></span><br><span class="line">innobackupex --apply-log --use-memory=<span class="number">1</span>G /backup/备份文件夹/<span class="comment">#在新的mysql里进行数据的准备工作，这一步用来合成可用的数据，--use-memory根据实际情况指定</span></span><br><span class="line">systemctl stop mariadb</span><br><span class="line">rm -rf /var/lib/mysql/*<span class="comment">#停止当前进程，并且删除数据目录和对应日志</span></span><br><span class="line">innobackupex --datadir=/var/lib/mysql --copy-back /backup/备份文件夹/<span class="comment">#将准备好的数据还原到对应目录里</span></span><br><span class="line">chown -R mysql: /var/lib/mysql/<span class="comment">#将文件夹属主和组都更改成mysql</span></span><br><span class="line">systemctl start mariadb<span class="comment">#重启进程</span></span><br></pre></td></tr></table></figure></p><h2><span id="增量备份与恢复">增量备份与恢复</span></h2><p>增量备份的前提是全量备份，假设我们已经进行了全量备份。增量备份过程如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">innobackupex -p数据库密码 --incremental /全量备份文件夹 --incremental-basedir=/backup/增量备份文件夹<span class="number">1</span>/<span class="comment">#与全量备份文件夹相比，进行增量备份</span></span><br><span class="line">scp -r /backup/* 另一个mysqlIP:/backup/<span class="comment">#传递给另个mysql里</span></span><br><span class="line">innobackupex --apply-log --redo-only --use-memory=<span class="number">1</span>G /backup/全量备份文件夹/<span class="comment">#先对最早的全量备份进行恢复</span></span><br><span class="line">innobackupex --apply-log --redo-only --use-memory=<span class="number">1</span>G /backup/全量备份文件夹/ --incremental-dir=/backup/增量备份文件夹<span class="number">1</span></span><br><span class="line"><span class="comment">#在之前全量备份的基础上合并一波增量备份</span></span><br><span class="line">systemctl stop mariadb</span><br><span class="line">rm -rf /var/lib/mysql/*<span class="comment">#停止当前进程，并且删除数据目录和对应日志</span></span><br><span class="line">innobackupex --datadir=/var/lib/mysql --copy-back /backup/备份文件夹/<span class="comment">#将准备好的数据还原到对应目录里</span></span><br><span class="line">chown -R mysql: /var/lib/mysql/<span class="comment">#将文件夹属主和组都更改成mysql</span></span><br><span class="line">systemctl start mariadb<span class="comment">#重启进程</span></span><br></pre></td></tr></table></figure></p><p>查看是否是增量备份还是全量备份，可以通过<code>xtrabackup_checkpoints</code>文件里的<code>backup_type</code>字段：<code>full-prepared</code>是全量备份、<code>incremental</code>是增量备份。    </p><h2><span id="mysql如何恢复到任意时间点">Mysql如何恢复到任意时间点</span></h2><p>众所周知，mysql的更新操作（UPDATE）是“先备份再覆盖”的一个过程，那备份在哪里呢?<code>buffer</code>。</p><p>但是这个瞬间就会出现buffer的数据页与磁盘的数据页内容不一致，这时的buffer的数据页叫<code>dirty page</code>。如果此时出现了mysql非正常宕机，就会出现“数据并没有同步到磁盘文件中，而且已经从内存里出来了”的现象，即数据丢失。</p><p>为了解决这个现象，就在buffer的<code>dirty page</code>变更结束之后，把相应修改记录记录到<code>redo log</code>里。如果在发现有数据丢失的现象，可以通过<code>redo log</code>回溯。更多内容可以看<a href="https://mp.weixin.qq.com/s?__biz=MjM5NjMyMjUzNg==&amp;mid=2448131616&amp;idx=1&amp;sn=5af80b03adef5846b7dc51015d99f7e7&amp;scene=0#wechat_redirect&amp;rd2werd=1#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MjM5NjMyMjUzNg==&amp;mid=2448131616&amp;idx=1&amp;sn=5af80b03adef5846b7dc51015d99f7e7&amp;scene=0#wechat_redirect&amp;rd2werd=1#wechat_redirect</a> 这篇文章。</p><p>整理一下mysql里更新语句的内幕：</p><p>系统当取到一个UPDATE语句的时候，会先通过主键找到该行，判断此行是否在buffer里，如果在就直接返回给执行器，如果不在就先从磁盘拷贝一份到内存里，在内存里对数据进行修改，此时生成了<code>dirty page</code>，同时也将这个操作记录更新到<code>redo log</code>里，<code>redo log</code>处于<code>prepare</code>状态（mysql生成<code>xid</code>)，通知执行器可以提交覆盖磁盘（这是一个事务）。然后执行器先生成这个操作的bin log（mysql是<code>日志先行</code>的设计），然后再执行覆盖的农作（将<code>xid</code>写进<code>bin log</code>)。至此更新完成。</p><p>假设此时mysql出现了非正常宕机，那么先找一下有没有之前的xtrabackup等工具保留的备份，如果有当日的备份，再结合<code>bin log</code>可以恢复一个临时表。然后扫描最后一个<code>bin log</code>，提取出xid。重做检查点以后的<code>redo log</code>，搜集处于<code>prepare</code>阶段的事务链表，将事务的<code>xid</code>与<code>bin log</code>中的<code>xid</code>对比。若存在，说明事务记录到<code>bin log</code>成功，但是最终未<code>commit</code>成功，则提交，否则就回滚。</p><h2><span id="参考文档">参考文档</span></h2><p><a href="http://mysql.taobao.org/monthly/2016/03/07/" target="_blank" rel="noopener">http://mysql.taobao.org/monthly/2016/03/07/</a><br><a href="http://mysql.taobao.org/monthly/2018/02/05/" target="_blank" rel="noopener">http://mysql.taobao.org/monthly/2018/02/05/</a><br><a href="https://mp.weixin.qq.com/s?__biz=MjM5NjMyMjUzNg==&amp;mid=2448131616&amp;idx=1&amp;sn=5af80b03adef5846b7dc51015d99f7e7&amp;scene=0#wechat_redirect&amp;rd2werd=1#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MjM5NjMyMjUzNg==&amp;mid=2448131616&amp;idx=1&amp;sn=5af80b03adef5846b7dc51015d99f7e7&amp;scene=0#wechat_redirect&amp;rd2werd=1#wechat_redirect</a><br><a href="https://help.aliyun.com/knowledge_detail/41738.html?spm=a2c4g.11186631.2.4.2b9d6998v5nwaK" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/41738.html?spm=a2c4g.11186631.2.4.2b9d6998v5nwaK</a></p>]]></content>
    
    <summary type="html">
    
      java 8-alpine这个镜像好像不带有/etc/localtime这个文件，这样可能日志时间会相差8小时，可以修改jar包来指定区域来解决问题。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="数据备份" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>记录一次优化前端docker的过程</title>
    <link href="http://yoursite.com/2019/06/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BC%98%E5%8C%96%E5%89%8D%E7%AB%AFdocker%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/06/12/记录一次优化前端docker的过程/</id>
    <published>2019-06-12T07:48:42.000Z</published>
    <updated>2019-06-12T13:35:10.232Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="最初优化">最初优化</span></h2><p>前端node项目一直以来虽然是容器部署，但是是很粗糙的形式—每次更新的过程给各位感受一下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先在宿主机里去项目文件夹里执行`git pull`，然后 docker <span class="keyword">exec</span> -it 容器名 /bin/bash 进入到对应容器里，然后执行`pm2 flush`、`npm run build`和`pm2 reload <span class="number">0</span>`。</span><br></pre></td></tr></table></figure></p><p>这种拿docker做虚拟机的行为实在是让人“叔可忍婶不可忍”。于是就要改变一下这个思路，重写一个dockerfile，内容如下：<br>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM keymetrics/pm2:latest-alpine</span><br><span class="line">MAINTAINER ChrisChan &lt;chen_shuo@dahuatech.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /<span class="keyword">var</span>/www/node/shopFront</span><br><span class="line">COPY shopFront/ .#由于上面已经指定了WORKDIR的地址，所以COPY/ADD/RUN等命令的相对路径都是WORKDIR的路径，所以这里是.</span><br><span class="line">RUN git pull &amp;&amp; npm run build</span><br><span class="line">EXPOSE <span class="number">3000</span>#暴露<span class="number">3000</span>端口</span><br><span class="line">CMD [ <span class="string">"pm2"</span>, <span class="string">"start"</span>, <span class="string">"npm"</span>]</span><br></pre></td></tr></table></figure></p><p>然后<code>docker build -t=&quot;ecnode：0.1&quot; .</code>生成镜像，<code>docker run --name ECNODE -it -p 33664:3000 ecnode:0.1</code>启动叫ECNODE的容器，发现服务站不住，启动完了后就死了。其实这里不能用<code>pm2 start npm</code>这种启动方法，应该用<code>pm2-docker start XXX.js</code>作为CMD，这样才能在后台站住。效果如图：<br><img src="/images/v2ray4.png" alt="akb48" title="因为有部分静态文件是存储在阿里云OSS上的，没有开放白名单就不会正常显示"></p><h2><span id="继续折腾">继续折腾</span></h2><p>上面这个dockerfile打成镜像的时间总共是165秒，如图：<br><img src="/images/v2ray2.png" alt="akb48"></p><p>分析一下发现时间大量的消耗在<code>npm run build</code>和<code>COPY</code>这两个步骤上了，因为dockerfile所在的文件夹shopFront/(项目文件夹）里包括<code>node_modules</code>，这个文件夹大小是220M左右，复制肯定比较消耗时间。于是我尝试换了一个Dockerfile写法：<br>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM keymetrics/pm2:latest-alpine</span><br><span class="line">MAINTAINER ChrisChan &lt;<span class="number">33664</span>@dahuatech.com&gt;</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /<span class="keyword">var</span>/www/node/shopFront</span><br><span class="line">WORKDIR /<span class="keyword">var</span>/www/node/shopFront#设定工作目录</span><br><span class="line">COPY <span class="keyword">package</span>.json .#<span class="keyword">package</span>.json要跟dockerfile在同一个文件夹下</span><br><span class="line">RUN  npm install</span><br><span class="line">COPY shopFront/ .#再将其他的内容拷贝过去</span><br><span class="line">RUN git pull</span><br><span class="line">EXPOSE <span class="number">3000</span></span><br><span class="line">CMD [ <span class="string">"pm2-docker"</span>, <span class="string">"start"</span>, <span class="string">"server.js"</span>]</span><br></pre></td></tr></table></figure></p><p>执行之后效果如图：<br><img src="/images/v2ray3.png" alt="akb48"></p><p>妈的，时间反而多了20秒。不过这样文件夹里就不用带着<code>node_modules</code>，因为<code>npm install</code>会生成一个<code>node_modules</code>。不过这个0.2镜像比之前的多不到100M。所以看来看去还是0.1更划算。</p><p>补充一下：<code>docker ps -a --no-trunc</code>是查看<code>docker ps</code>完全命令，有的时候COMMAND显示不全就用它。 </p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://pm2.io/doc/zh/runtime/integration/docker/#%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AAdocker%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">https://pm2.io/doc/zh/runtime/integration/docker/#%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AAdocker%E6%96%87%E4%BB%B6</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTAyNzQ2OA==&amp;mid=2649700687&amp;idx=1&amp;sn=a656b7c7fdacc1b3df97c1d2630e50d9&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA5OTAyNzQ2OA==&amp;mid=2649700687&amp;idx=1&amp;sn=a656b7c7fdacc1b3df97c1d2630e50d9&amp;scene=21#wechat_redirect</a><br><a href="https://stackoverflow.com/questions/35774714/how-to-cache-the-run-npm-install-instruction-when-docker-build-a-dockerfile" target="_blank" rel="noopener">https://stackoverflow.com/questions/35774714/how-to-cache-the-run-npm-install-instruction-when-docker-build-a-dockerfile</a></p><p><img src="/images/hongkong.jpg" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      香港加油！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="前端node" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AFnode/"/>
    
      <category term="前端pm2" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AFpm2/"/>
    
  </entry>
  
  <entry>
    <title>使用Zabbix监控logstash</title>
    <link href="http://yoursite.com/2019/06/11/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7logstash/"/>
    <id>http://yoursite.com/2019/06/11/使用zabbix监控logstash/</id>
    <published>2019-06-11T07:04:28.000Z</published>
    <updated>2019-06-11T12:54:12.879Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="配置过程">配置过程</span></h2><p>logstash常规的监控项可以去移步 <a href="https://github.com/fredprod/logstash-zabbix" target="_blank" rel="noopener">https://github.com/fredprod/logstash-zabbix</a> ，有模板有脚本，可以说是非常全面、服务到家了。</p><p>本文主要是要监控logstash的tps，先说一下tps的定义：它是Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。我们从TPS里反馈出logstash的实时工作状态。</p><p>首先先要安装<code>logstash-output-zabbix</code>，安装方法很简单：在logstash/bin目录下执行<code>./logstash-plugin install logstash-output-zabbix</code>，如图：<br><img src="/images/logstash.png" alt="akb48"></p><p>然后在启动logstash对应的conf文件里，新增如下的配置：<br>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  ...原有配置略</span><br><span class="line"></span><br><span class="line">  metrics &#123;</span><br><span class="line">    meter =&gt; <span class="string">"events"</span>#这里统计经过filter的事件</span><br><span class="line">    add_tag =&gt; <span class="string">"metric"</span></span><br><span class="line">    add_field =&gt; &#123;<span class="string">"[@metadata][zabbix_key]"</span> =&gt; <span class="string">"logstash_events"</span>&#125; #zabbix item的key，这个要和zabbix-server的配置一致</span><br><span class="line">    add_field =&gt; &#123; <span class="string">"[@metadata][zabbix_host]"</span> =&gt; <span class="string">"被监控机器名"</span> &#125; #zabbix写入的主机</span><br><span class="line">    flush_interval =&gt; <span class="number">30</span>#设定写入频率，我这里是<span class="number">30</span>秒一次</span><br><span class="line">  &#125; </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">...原有配置略</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="string">"metric"</span> in [tags] &#123;</span><br><span class="line">    zabbix &#123; </span><br><span class="line">      zabbix_server_host =&gt; <span class="string">"172.31.0.77"</span>#这里是zabbix-server的地址</span><br><span class="line">      zabbix_host =&gt; <span class="string">"[@metadata][zabbix_host]"</span></span><br><span class="line">      zabbix_key =&gt; <span class="string">"[@metadata][zabbix_key]"</span></span><br><span class="line">      zabbix_value =&gt; <span class="string">"[events][count]"</span>   #[events][count] 是事件统计数据，</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>保存之后，来到zabbix-server的web端，新增一个items，如下：<br><img src="/images/logstash2.png" alt="akb48"></p><font color="red">注意！这个items的类型是<code>zabbix-trapper</code>（Zabbix采集器）！同时设定<code>Preprocessing steps</code>为<code>simple change</code>。</font><p>然后重启logstash即可。重启之后，如果出现了如下的错误：<br>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2019</span><span class="number">-06</span><span class="number">-11</span>T15:<span class="number">53</span>:<span class="number">33</span>,<span class="number">789</span>][WARN ][logstash.outputs.zabbix  ] Zabbix server at ZABBIXIP地址 rejected all items sent. &#123;:zabbix_host=&gt;<span class="string">"被监控机器名"</span>&#125;</span><br><span class="line">[<span class="number">2019</span><span class="number">-06</span><span class="number">-11</span>T15:<span class="number">53</span>:<span class="number">43</span>,<span class="number">797</span>][WARN ][logstash.outputs.zabbix  ] Zabbix server at ZABBIXIP地址 rejected all items sent. &#123;:zabbix_host=&gt;<span class="string">"被监控机器名"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>检查一下<code>zabbix_key</code>、<code>zabbix_host</code>是否与<code>zabbix-server</code>网页端配置的完全一致，而且<code>zabbix_value</code>也最好不要是具体值，<code>[events][count]</code>就可以了。</p><p>然后在zabbix-server端就可以看到tps结果了：<br><img src="/images/logstash3.png" alt="akb48"></p><h2><span id="使用systemctl启动logstash">使用systemctl启动logstash</span></h2><p>我这个logstash是tar包安装的，每一次杀死启动都是敲命令，看上去很挫，于是就要转成systemctl的方式。首先先创建logstash用户和用户组，确认logstash用户在logstash用户组里。然后需要改几个地方：</p><p>先去<code>pipelines.yml</code>里修改path.config: “/logstash路径/config/*.conf”，改成实际的配置文件。然后再在同文件夹的<code>startup.options</code>里修改<br>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LS_HOME=/usr/share/logstash<span class="number">-6.2</span><span class="number">.3</span>  项目目录</span><br><span class="line">LS_SETTINGS_DIR=<span class="string">"$LS_HOME/config"</span></span><br><span class="line">LS_OPTS=<span class="string">"--path.settings $&#123;LS_SETTINGS_DIR&#125;"</span></span><br></pre></td></tr></table></figure></p><p>再logstash安装路径下执行<code>./bin/system-install /logstash安装路径/config/startup.options systemd</code>。一会就能看到一个成功的字样，去<code>/etc/systemd/system/logstash.service</code>目录可以看到配置文件。此时就是可使用<code>systemctl enable/start/stop/restart logstash.service</code>来操作了！</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.zabbix.com/cn/integrations/logstash" target="_blank" rel="noopener">https://www.zabbix.com/cn/integrations/logstash</a><br><a href="https://notes-by-yangjinjie.readthedocs.io/zh_CN/latest/service/elk/08-logstash-output-zabbix.html" target="_blank" rel="noopener">https://notes-by-yangjinjie.readthedocs.io/zh_CN/latest/service/elk/08-logstash-output-zabbix.html</a></p>]]></content>
    
    <summary type="html">
    
      Zabbix 3.4的item配置项里已经取消掉Data type，统一合并到Type of information里了。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="tps" scheme="http://yoursite.com/tags/tps/"/>
    
  </entry>
  
  <entry>
    <title>搭建V2Ray服务端搭配Shadowrocket使用</title>
    <link href="http://yoursite.com/2019/06/10/%E6%90%AD%E5%BB%BAV2Ray%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E9%85%8DShadowrocket%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/10/搭建V2Ray服务端搭配Shadowrocket使用/</id>
    <published>2019-06-10T12:17:49.000Z</published>
    <updated>2019-06-11T02:54:28.825Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="搭建服务端">搭建服务端</span></h2><p>由于今年是“六四事件”三十周年，从6月1号开始，大陆范围内铺天盖地的封网行动开始了。记得今年两会期间，也有短暂的封网，只不过那次是封端口，这次就比较狠了，直接被GFW封IP（即国内ISP无法访问服务器，但是国外的IP可以正常访问）。</p><p>没有外网的日子真是难受哇，经过这两天的研究，我终于再次成功使用AWS（为什么不用阿里云，人家也要吃饭的嘛）搭建了梯子客户端。这次不再用shadowsocks了，而改用了v2ray。</p><p>首先在AWS加拿大区域买了一个centos7，配置好秘钥和基本信息，然后ssh登录，开始搭建v2ray服务端。步骤如下：<br>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install wget</span><br><span class="line">sudo yum install -y zip unzip</span><br><span class="line">wget https:<span class="comment">//install.direct/go.sh</span></span><br><span class="line">sudo bash <span class="keyword">go</span>.sh </span><br><span class="line"></span><br><span class="line">## 启动</span><br><span class="line">sudo systemctl start v2ray</span><br><span class="line">## 停止</span><br><span class="line">sudo systemctl stop v2ray</span><br><span class="line">## 重启</span><br><span class="line">sudo systemctl restart v2ray</span><br></pre></td></tr></table></figure></p><p>然后<code>sudo cat /etc/v2ray/config.json</code>，查看一下当前开启的端口号，返回aws控制台在对应的安全组里放开此端口号，可以跑到别的服务器上去telnet试一下，通了就是OK！</p><h2><span id="配置shadowrockets">配置shadowrockets</span></h2><p>v2ray默认用的是vmess协议，由于我的iphone里只有白色的小火箭。所以就要改一下配置文件，在<code>/etc/v2ray/config.json</code>配置文件新增一个协议：<br>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"inboundDetour"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"protocol"</span>: <span class="string">"shadowsocks"</span>,</span><br><span class="line"> <span class="string">"port"</span>: <span class="number">443</span>,#对应的端口</span><br><span class="line"> <span class="string">"settings"</span>: &#123;</span><br><span class="line">  <span class="string">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">  <span class="string">"password"</span>: <span class="string">"加密密码"</span>,</span><br><span class="line">  <span class="string">"udp"</span>: <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>这样就可以让V2Ray支持Shadowsocks协议。不过这里要注意，此时shadowrockets不应该填写v2ray的端口而是填写443这个端口，所以别忘了把这个端口加入到安全组里。</p><h2><span id="套一个cdn">套一个CDN</span></h2><p>在V2Ray前套一个CDN，可以让防火请不会那么快的发觉你的真实IP。原理说起来很简单：先在服务器上用v2ray伪装成一个网站，再用CDN中转，那么，你的流量就是这样传递的：<br><img src="/images/v2ray.png" alt="akb48"></p><p>于是我选择了使用阿里云的CDN，由于我的IP是加拿大的，所以选择了全球加速。配置好源站信息后，再去申请一个域名，把CNAME复制进去即可。这时候在手机的shodowrocket里，服务器信息就直接写刚刚申请的域名（不是CNAME），端口写80就行，测试一晚，看看阿里云的CDN会不会出事…</p><p><img src="/images/v2ray1.png" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.4spaces.org/digitalocean-build-v2ray-0-1/?replytocom=593#respond" target="_blank" rel="noopener">https://www.4spaces.org/digitalocean-build-v2ray-0-1/?replytocom=593#respond</a><br><a href="https://www.rultr.com/tutorials/proxy/2580.html" target="_blank" rel="noopener">https://www.rultr.com/tutorials/proxy/2580.html</a></p>]]></content>
    
    <summary type="html">
    
      这颗心还是向往更旷阔的世界的。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="翻墙" scheme="http://yoursite.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="v2ray" scheme="http://yoursite.com/tags/v2ray/"/>
    
      <category term="ssr" scheme="http://yoursite.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>调整Django使其可以上传大文件和多文件</title>
    <link href="http://yoursite.com/2019/06/06/%E8%B0%83%E6%95%B4Django%E4%BD%BF%E5%85%B6%E5%8F%AF%E4%BB%A5%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E5%92%8C%E5%A4%9A%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/06/06/调整Django使其可以上传大文件和多文件/</id>
    <published>2019-06-06T06:16:24.000Z</published>
    <updated>2019-06-06T08:51:26.569Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="更改上传文件大小限制">更改上传文件大小限制</span></h2><p>我的django上传文件工具代码是<a href="https://rorschachchan.github.io/2018/12/19/Django实现图片上传/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/12/19/Django实现图片上传/</a> 这么写的，但是发现再上传大的图片（7M左右的GIF图片）时，出现了413的错误提示：<br><img src="/images/django51.png" alt="akb48"></p><p>我上传的方法<code>request.FILES.getlist</code>，但是文件的体积太大了，所有就有这样的错误。去django的官方文档<a href="https://docs.djangoproject.com/en/2.2/ref/settings/#file-upload-max-memory-size" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.2/ref/settings/#file-upload-max-memory-size</a> 查了一下：<br><img src="/images/django52.png" alt="akb48"><br><img src="/images/django53.png" alt="akb48"></p><p>原来django默认的上传文件大小是2.5M，小于2.5M时，会放在InMemoryFileUploadFile（内存里面）对象里面；大于2.5M时，会放在TemporaryFileUploadFile（磁盘文件）里面。于是我们就要更改一下这个大小，改成25M。这个要谨慎使用，小心内存溢出。</p><p>打开<code>settings.py</code>，增加一句<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILE_UPLOAD_MAX_MEMORY_SIZE = <span class="number">26214400</span>  <span class="comment">#上传文件大小，改成25M</span></span><br><span class="line">DATA_UPLOAD_MAX_MEMORY_SIZE = <span class="number">26214400</span><span class="comment">#上传数据大小，也改成了25M</span></span><br></pre></td></tr></table></figure></p><p>保存之后，django会自动重启，再次尝试传输单个大文件，应该就会成功了。</p><p>其实这个改动不仅仅是单个文件小于25M，假如是批量上传，所选的文件加起来总量小于25M都可以一并传上去了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://stackoverflow.com/questions/55190498/413-payload-too-large-on-django-server" target="_blank" rel="noopener">https://stackoverflow.com/questions/55190498/413-payload-too-large-on-django-server</a><br><a href="https://github.com/django/django/blob/master/django/conf/global_settings.py#L297" target="_blank" rel="noopener">https://github.com/django/django/blob/master/django/conf/global_settings.py#L297</a></p>]]></content>
    
    <summary type="html">
    
      twitter登录页如果发现能输入账号却不能输入密码的情况，请检查一下SwitchyOmega是否正常
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="文件上传" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>记录部署ProxySql的过程</title>
    <link href="http://yoursite.com/2019/05/31/%E8%AE%B0%E5%BD%95%E9%83%A8%E7%BD%B2ProxySql%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/05/31/记录部署ProxySql的过程/</id>
    <published>2019-05-31T03:12:05.000Z</published>
    <updated>2019-06-05T06:45:21.876Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="安装与启动">安装与启动</span></h2><p>先去<code>https://github.com/sysown/proxysql/releases</code> 下载稳定版本 ，我是下载的<code>proxysql-2.0.4-1-centos7.x86_64.rpm</code>，然后<code>rpm -ivh proxysql-2.0.4-1-centos7.x86_64.rpm</code>，如果出现了如下错误：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@dvlshop-proxysql<span class="number">-001</span> ~]<span class="comment"># rpm -ivh proxysql-2.0.4-1-centos7.x86_64.rpm </span></span><br><span class="line">error: Failed dependencies:</span><br><span class="line">perl(DBD::mysql) <span class="keyword">is</span> needed by proxysql<span class="number">-2.0</span><span class="number">.4</span><span class="number">-1.</span>x86_64</span><br><span class="line">perl(DBI) <span class="keyword">is</span> needed by proxysql<span class="number">-2.0</span><span class="number">.4</span><span class="number">-1.</span>x86_64</span><br></pre></td></tr></table></figure></p><p>就执行一下<code>yum install -y perl-IO-Socket-SSL perl-DBD-MySQL</code>就可以了。</p><p>安装成功之后，启动的命令是<code>service proxysql start</code>：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dvlshop-proxysql<span class="number">-001</span> ~]<span class="comment"># service proxysql start</span></span><br><span class="line">Starting ProxySQL: <span class="number">2019</span><span class="number">-05</span><span class="number">-31</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">10</span> [INFO] Using config file /etc/proxysql.cnf</span><br><span class="line"><span class="number">2019</span><span class="number">-05</span><span class="number">-31</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">10</span> [INFO] No SSL keys/certificates found <span class="keyword">in</span> datadir (/var/lib/proxysql). Generating new keys/certificates.</span><br><span class="line">DONE!</span><br><span class="line">[root@dvlshop-proxysql<span class="number">-001</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>启动完毕就可以使用初始命令<code>mysql -uadmin -padmin -h 127.0.0.1 -P 6032</code>来登录proxysql了，如图：<br><img src="/images/proxy16.png" alt="akb48"></p><p>补充一下：proxysql的默认管理端口是<code>6032</code>，客户端服务端口是<code>6033</code>。默认的用户名密码都是<code>admin</code>，可以在配置文件里看到。<br><img src="/images/proxy18.png" alt="akb48"></p><p>再说一下各个重要文件的位置：proxysql的静态配置文件是<code>/etc/proxysql.cnf</code>(只在第一次启动的时候有用，后续所有的配置修改都是对SQLite数据库操作，并且不会更新到<code>proxysql.cnf</code>文件中。)，日志文件是<code>/var/lib/proxysql/proxysql.log</code>，SQLITE的数据文件是<code>/var/lib/proxysql/proxysql.db</code>。</p><h2><span id="基本概念">基本概念</span></h2><p>与之前的中间件atlas不同，配置ProxySQL是基于sql命令的方式完成的，而且配置完成之后直接应用无需重启。怎么做到这个的呢？是因为ProxySQL的三层管理配置设计：</p><ol><li>runtime：运行中使用的配置文件，这些表的数据库无法直接修改，只能从其他层级load加载。这一份配置会直接影响到生产环境的，所以要将配置加载进RUNTIME层时需要三思而行；</li><li>memory：提供用户动态修改配置文件，它是我们修改proxysql的唯一正常入口。一般来说在修改一个配置时，首先修改Memory层，确认无误后再接入RUNTIME层，最后持久化到DISK和CONFIG FILE层。也就是说memeory层里面的配置随便改，不影响生产，也不影响磁盘中保存的数据。</li><li>disk：将修改的配置保存到磁盘SQLit表中（即：proxysql.db），DISK/CONFIG FILE层表示持久存储的那份配置，持久层对应的磁盘文件是$(DATADIR)/proxysql.db，在重启ProxySQL的时候，会从proxysql.db文件中加载信息。即如果不持久化下来，重启后，配置都将丢失。</li><li>config：一般不使用它（即：proxysql.cnf）</li></ol><p>再重复一遍：proxysql分为三个级别，RUNTIME是即时生效的，MEMORY是保存在内存中但并不立即生效的，DISK|CONFIG FILE是持久化或写在配置文件中的。修改的配置都是在memory层。可以load到runtime，使配置在不用重启proxysql的情况下也可以生效，也可以save到disk，将对配置的修改持久化！如图：<br><img src="/images/proxy17.png" alt="akb48"></p><p>这三个级别的配置文件互不干扰，在某个层级修改了配置文件，想要加载或保存到另一个层级，需要额外的LOAD或SAVE操作：”LOAD xx_config FROM xx_level | LOAD xx_config TO xx_level | SAVE xx_config TO xx_level | SAVE xx_config FROM xx_level”等等。</p><p>由此可见，如果想要更改proxysql的初始账号密码以及端口，改了<code>/etc/proxysql.cnf</code>是没用的，应该通过sql命令行进入到proxysql里，先查看<code>global_variables</code>这个表：<br><img src="/images/proxy19.png" alt="akb48"></p><p>要修改表里的内容才算是真正的修改了配置文件！于是想要在admin:admin的基础上添加一个lcshop:lcshop2019这个用户同时把登录端口改成127.0.0.1:6969，那么语句如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update global_variables set variable_value = <span class="string">'admin:admin;lcshop:lcshop2019'</span> where variable_name = <span class="string">'admin-admin_credentials'</span>;</span><br><span class="line">update global_variables set variable_value = <span class="string">'127.0.0.1:6969'</span> where variable_name = <span class="string">'admin-mysql_ifaces'</span>;<span class="comment">#登录proxysql的管理端口是6969了</span></span><br><span class="line">LOAD MYSQL SERVERS TO RUNTIME  <span class="comment">#常用，让修改的配置生效</span></span><br><span class="line">SAVE MYSQL SERVERS TO DISK     <span class="comment">#常用，将修改的配置持久化</span></span><br></pre></td></tr></table></figure></p><p>此时就是使用新账号和新端口访问proxysql管理界面了！如图：<br><img src="/images/proxy20.png" alt="akb48"></p><p>跟mysql一样，如果你想查看历史命令记录，<code>cat ~/mysql_history</code>即可。</p><h2><span id="具体配置">具体配置</span></h2><p>假设我有一组阿里云RDS数据库，主库的内网地址是rm-bp1el471x0ltbg402.mysql.rds.aliyuncs.com，从库的内网地址是rr-bp10ki29n7n8z0ex0.mysql.rds.aliyuncs.com，端口皆3306，并且将这台proxysql的IP地址添加到双方的白名单里。</p><p>首先先把两个mysql信息插入到<code>mysql_servers</code>，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; insert into mysql_servers(hostgroup_id,hostname,port) values(<span class="number">10</span>,<span class="string">'rm-bp1el471x0ltbg402.mysql.rds.aliyuncs.com'</span>,<span class="number">3306</span>);<span class="comment">#10表示写组，为20表示读组。</span></span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers(hostgroup_id,hostname,port) values(<span class="number">20</span>,<span class="string">'rr-bp10ki29n7n8z0ex0.mysql.rds.aliyuncs.com'</span>,<span class="number">3306</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line">MySQL [(none)]&gt; select * <span class="keyword">from</span> mysql_servers;</span><br><span class="line">+--------------+---------------------------------------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname                                    | port | gtid_port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+---------------------------------------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| <span class="number">10</span>           | rm-bp1el471x0ltbg402.mysql.rds.aliyuncs.com | <span class="number">3306</span> | <span class="number">0</span>         | ONLINE | <span class="number">1</span>      | <span class="number">0</span>           | <span class="number">1000</span>            | <span class="number">0</span>                   | <span class="number">0</span>       | <span class="number">0</span>              |         |</span><br><span class="line">| <span class="number">20</span>           | rr-bp10ki29n7n8z0ex0.mysql.rds.aliyuncs.com | <span class="number">3306</span> | <span class="number">0</span>         | ONLINE | <span class="number">1</span>      | <span class="number">0</span>           | <span class="number">1000</span>            | <span class="number">0</span>                   | <span class="number">0</span>       | <span class="number">0</span>              |         |</span><br><span class="line">+--------------+---------------------------------------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>然后还要在阿里云的RDS控制台上创建两个用户，一个是监控用户<code>sqlmonitor</code>，一个是普通的进程用户<code>proxysql</code>。先将进程用户proxysql添加到<code>mysql_users</code>这个表里<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt;INSERT INTO mysql_users(username,password,default_hostgroup) VALUES (<span class="string">'proxysql'</span>,<span class="string">'这里是账号对应的密码'</span>,<span class="number">10</span>);</span><br><span class="line">MySQL [(none)]&gt; select * <span class="keyword">from</span> mysql_users;</span><br><span class="line">+----------+--------------------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+---------+</span><br><span class="line">| username | password           | active | use_ssl | default_hostgroup | default_schema | schema_locked | transaction_persistent | fast_forward | backend | frontend | max_connections | comment |</span><br><span class="line">+----------+--------------------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+---------+</span><br><span class="line">| proxysql | 这里是账号对应的密码| <span class="number">1</span>      | <span class="number">0</span>       | <span class="number">10</span>                | NULL           | <span class="number">0</span>             | <span class="number">1</span>                      | <span class="number">0</span>            | <span class="number">1</span>       | <span class="number">1</span>        | <span class="number">10000</span>           |         |</span><br><span class="line">+----------+--------------------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+---------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>这里说一下<code>default_hostgroup</code>，它的意思是“这个用户的请求没有匹配到规则时，默认发到这个<code>hostgroup</code>，默认0”，由于我们上面设定10是写组，所以这里写成10。</p><p>这里默认保存的密码是明文的，如果想保存加密后的密码，可以先去mysql的界面里进行加密，比如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select PASSWORD(<span class="string">'114514'</span>);</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| PASSWORD(<span class="string">'114514'</span>)                        |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| *D9050F2D99C3DDD8138912B7BDF8F4BACBE3A8E7 |</span><br><span class="line">+-------------------------------------------+</span><br></pre></td></tr></table></figure></p><p>然后用这个密码输入，比如：<code>insert into mysql_users(username,password,active,default_hostgroup) values (&#39;proxysql2&#39;,&#39;*D9050F2D99C3DDD8138912B7BDF8F4BACBE3A8E7&#39;,1,20);</code>。注意！mysql_users的username是不能重复的。</p><p>确认一下账号已经正确连接：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select * <span class="keyword">from</span> mysql_server_connect_log;</span><br><span class="line">+---------------------------------------------+------+------------------+-------------------------+---------------+</span><br><span class="line">| hostname                                    | port | time_start_us    | connect_success_time_us | connect_error |</span><br><span class="line">+---------------------------------------------+------+------------------+-------------------------+---------------+</span><br><span class="line">| rm-bp1el471x0ltbg402.mysql.rds.aliyuncs.com | <span class="number">3306</span> | <span class="number">1559649241943118</span> | <span class="number">8607</span>                    | NULL          |</span><br><span class="line">| rr-bp10ki29n7n8z0ex0.mysql.rds.aliyuncs.com | <span class="number">3306</span> | <span class="number">1559649242748088</span> | <span class="number">1291</span>                    | NULL          |</span><br><span class="line">| rr-bp10ki29n7n8z0ex0.mysql.rds.aliyuncs.com | <span class="number">3306</span> | <span class="number">1559649301943192</span> | <span class="number">1396</span>                    | NULL          |</span><br><span class="line">| rm-bp1el471x0ltbg402.mysql.rds.aliyuncs.com | <span class="number">3306</span> | <span class="number">1559649302760022</span> | <span class="number">7218</span>                    | NULL          |</span><br><span class="line">+---------------------------------------------+------+------------------+-------------------------+---------------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>发现<code>connect_error</code>为空，而且<code>connect_success_time_us</code>有值可见已经成功连接了。如果<code>connect_error</code>有具体的错误，那么就可以根据错误来修改。</p><p>然后添加<code>sqlmonitor</code>用户，它主要是用来健康监测：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set mysql-monitor_username=<span class="string">'sqlmonitor'</span>;</span><br><span class="line">set mysql-monitor_password=<span class="string">'对应的密码'</span>;</span><br><span class="line"><span class="comment">#或者是UPDATE global_variables SET variable_value='monitor' WHERE variable_name='sqlmonitor';</span></span><br><span class="line"><span class="comment">#UPDATE global_variables SET variable_value='unixfbi' WHERE variable_name='对应的密码'; </span></span><br><span class="line">LOAD MYSQL SERVERS TO RUNTIME;  <span class="comment">#别忘了让修改的配置生效</span></span><br><span class="line">SAVE MYSQL SERVERS TO DISK;     <span class="comment">#将修改的配置持久化</span></span><br></pre></td></tr></table></figure></p><p>此时在另外一个xshell对话框窗口尝试一下使用proxysql连接数据库，使用<code>mysql -h127.0.0.1 -P6033 -uproxysql -p</code>效果如图：<br><img src="/images/proxy21.png" alt="akb48"></p><p>已经成功的通过proxysql来访问到数据库了！</p><h2><span id="验证读写分离">验证读写分离</span></h2><p>首先在proxysql账号下创建一个tables：<br><img src="/images/proxy22.png" alt="akb48"></p><p>然后往里面随机插入三条数据：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO players ( name, team, num ) VALUES ( <span class="string">"Jordan"</span>, <span class="string">"Bulls"</span> , <span class="number">23</span>);</span><br><span class="line">INSERT INTO players ( name, team, num ) VALUES ( <span class="string">"Kobe"</span>, <span class="string">"Lakers"</span> , <span class="number">24</span>);</span><br><span class="line">INSERT INTO players ( name, team, num ) VALUES ( <span class="string">"Duncan"</span>, <span class="string">"Spurs"</span> , <span class="number">21</span>);</span><br></pre></td></tr></table></figure></p><p>查看数据如下：<br><img src="/images/proxy23.png" alt="akb48"></p><p>此时新开一个xshell窗口登录proxysql的管理端，<code>select * from stats_mysql_query_digest;</code>查看语句细节如下：<br><img src="/images/proxy24.png" alt="akb48"></p><p>发现所有的语句的hostgroup都是10，也就是我们上面设定的写库，即读库并没有承担起读的作用。这是为什么呢？因为proxysql还需要设定路由。于是我们添加两个路由：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply)values(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'^SELECT.*FOR UPDATE$'</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply)values(<span class="number">2</span>,<span class="number">1</span>,<span class="string">'^SELECT'</span>,<span class="number">20</span>,<span class="number">1</span>);</span><br><span class="line">load mysql query rules to runtime;<span class="comment">#生效</span></span><br><span class="line">save mysql query rules to disk;<span class="comment">#持久化</span></span><br></pre></td></tr></table></figure></p><p>如图：<br><img src="/images/proxy25.png" alt="akb48"></p><p>加上这几句话的含义是：1.将select语句全部路由至hostgroup_id=20的组(也就是读组)； 2.但是<code>select * from tb for update</code>这样的语句是修改数据的，所以需要单独定义，将它路由至hostgroup_id=10的组(也就是写组)； 3.其他没有被规则匹配到的组将会被路由至用户默认的组(mysql_users表中的<code>default_hostgroup</code>)</p><p>然后我们返回到mysql，再插入几句数据，再重新打开<code>select * from stats_mysql_query_digest;</code>，发现符合标准的select都落到了hostgroup是20的mysql上了，测试读写分离成功，如图：<br><img src="/images/proxy26.png" alt="akb48"></p><p>最后补充几个常用的语句：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select hostgroup_id, hostname, status <span class="keyword">from</span> runtime_mysql_servers;<span class="comment">#查看在用的mysql状态</span></span><br><span class="line">select * <span class="keyword">from</span> mysql_server_ping_log;<span class="comment">#查看mysql的连接情况</span></span><br><span class="line">select * <span class="keyword">from</span> stats_mysql_query_rules;<span class="comment">#查看路由规则命中情况</span></span><br><span class="line">load mysql users to runtime;</span><br><span class="line">load mysql servers to runtime;</span><br><span class="line">load mysql query rules to runtime;</span><br><span class="line">load mysql variables to runtime;</span><br><span class="line">load admin variables to runtime;</span><br><span class="line"><span class="comment">#load进runtime，是配置生效</span></span><br><span class="line"></span><br><span class="line">save mysql users to disk;</span><br><span class="line">save mysql servers to disk;</span><br><span class="line">save mysql query rules to disk;</span><br><span class="line">save mysql variables to disk;</span><br><span class="line">save admin variables to disk;</span><br><span class="line"><span class="comment">#save到磁盘(/var/lib/proxysql/proxysql.db)中，永久保存配置</span></span><br></pre></td></tr></table></figure></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/sysown/ProxySQL" target="_blank" rel="noopener">https://github.com/sysown/ProxySQL</a><br><a href="https://arstercz.com/proxysql-%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">https://arstercz.com/proxysql-%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8/</a><br><a href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/" target="_blank" rel="noopener">http://seanlook.com/2017/04/10/mysql-proxysql-install-config/</a> （具体各表的信息可以看这个）<br><a href="https://www.cnblogs.com/kevingrace/p/10329714.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/10329714.html</a>    （墙裂推荐！mysql 5.7的主从同步也有）</p>]]></content>
    
    <summary type="html">
    
      以前扫描出来是封端口，现在是把整个IP都封掉了，技术进步了。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="读写分离" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="proxysql" scheme="http://yoursite.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab配置ssh，实现秘钥上传下载代码</title>
    <link href="http://yoursite.com/2019/05/21/Gitlab%E9%85%8D%E7%BD%AEssh%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%A7%98%E9%92%A5%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/05/21/Gitlab配置ssh，实现秘钥上传下载代码/</id>
    <published>2019-05-21T09:28:26.000Z</published>
    <updated>2019-05-21T13:03:27.722Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="常规配置">常规配置</span></h2><p>gitlab配置ssh比较简单，在代码机上使用<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code>制作<code>id_rsa</code>和<code>id_rsa.pub</code>，然后来到gitlab的web页面，settings—ssh keys,把<code>id_rsa.pub</code>拷贝进去，然后点击<code>Add key</code>:<br><img src="/images/gitlab32.png" alt="akb48"></p><p>然后返回到代码机器上，再对应的代码目录里使用<code>git remote -v</code>查看一下当前的方式，如果不是git的话，通过<code>git remote set-url origin git@你的project地址</code>修改，然后再试一下 <code>ssh -T git@&quot;你的gitlab服务器地址&quot;</code>是否会出现welcome，如果可以的话，那么就可以通过ssh的方式下载上传代码以及<code>git clone 对应的project</code>了。</p><h2><span id="容器配置">容器配置</span></h2><p>但是现在很多人都用容器部署gitlab，而且在部署的时候除了指定80，443端口的映射，还制定了22端口的映射。比如我的这个gitlab容器的启动命令就是：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach --hostname 外网IP --publish <span class="number">443</span>:<span class="number">443</span> --publish <span class="number">80</span>:<span class="number">80</span> --publish <span class="number">2222</span>:<span class="number">22</span> --name gitlab --restart always gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><p>可见我把宿主机的2222端口对应给了gitlab容器。那么像上面的方法肯定不会成功，这里就需要我们修改一处地方。</p><p>首先进入容器，然后修改<code>gitlab.rb</code>文件，这个文件在容器里有很多，我这个镜像里的gitlab.rb是<code>/etc/gitlab/gitlab.rb</code>，然后把<code>gitlab_rails[&#39;gitlab_shell_ssh_port&#39;]</code>改成2222并且去掉注释，如图：<br><img src="/images/gitlab33.png" alt="akb48"></p><p>然后<code>gitlab-ctl restart</code>重启之，重启完毕之后，在代码机上测试一下ssh：<br><img src="/images/gitlab34.png" alt="akb48"></p><p>可以已经连通，修改一下remote master地址之后，就可以直接上传了：<br><img src="/images/gitlab35.png" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      据说ssh连接可以不指定文件大小，而https还要设定文件大小
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
      <category term="ssh keys" scheme="http://yoursite.com/tags/ssh-keys/"/>
    
  </entry>
  
  <entry>
    <title>摆弄摆弄iptables</title>
    <link href="http://yoursite.com/2019/05/20/%E6%91%86%E5%BC%84%E6%91%86%E5%BC%84iptables/"/>
    <id>http://yoursite.com/2019/05/20/摆弄摆弄iptables/</id>
    <published>2019-05-20T09:06:14.000Z</published>
    <updated>2019-05-21T03:21:28.529Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>作为一名运维人员，安全是第一任务，那么某些高机密web网页限制IP访问是必做的环节，当然如果使用阿里云的“安全组”可以让这一切变的简单和直观。不过有时候，一个安全组里面有多个服务，不同的服务使用同一个端口（比如都是443），有些443要对所有人开放，有的443只能对公司的IP开放，那么如果不想重新收拾安全组的话，就干脆用iptables。</p><h2><span id="普通的iptables">普通的iptables</span></h2><p>常用的iptables规则如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iptables -nvL<span class="comment">#详细查看当前iptables情况</span></span><br><span class="line">iptables -I INPUT -p tcp --dport <span class="number">8701</span> -j DROP<span class="comment">#所有来访问8701端口的请求都作废</span></span><br><span class="line">iptables -I INPUT -s <span class="number">60.191</span><span class="number">.94</span><span class="number">.118</span> -p tcp --dport <span class="number">8070</span> -j ACCEPT<span class="comment">#只准许60.191.94.118这个IP访问8070端口</span></span><br><span class="line">iptables -t nat -I PREROUTING <span class="number">1</span> -s <span class="number">120.92</span><span class="number">.136</span><span class="number">.159</span>/<span class="number">32</span> -p tcp -m tcp --dport <span class="number">6379</span> -j DNAT --to-destination <span class="number">100.99</span><span class="number">.231</span><span class="number">.81</span>:<span class="number">6379</span><span class="comment">#准许120.92.136.159的6379信息转发到100.99.231.81的6379里</span></span><br><span class="line">iptables -A OUTPUT -p tcp -m tcp --dport <span class="number">61616</span> -j DROP<span class="comment">#将61616端口的报文抛弃</span></span><br><span class="line">iptables -D INPUT <span class="number">1</span><span class="comment">#删除INPUT表里的第一规则</span></span><br><span class="line">iptables -L FORWARD --line-numbers <span class="comment">#展现规则序号，-D删除的行号就是这里的序号</span></span><br></pre></td></tr></table></figure></p><p>如果不小心配错的规则比较多，不愿意一个一个删除，可以执行<code>service iptables restart</code>直接恢复。</p><h2><span id="容器的iptables">容器的iptables</span></h2><p>现在容器化横行，但是我们也要限制IP来访问容器的端口，但是如果像上面那样的话，是无法成功的。对于容器，为了避免您的规则被docker破坏,请使用<code>DOCKER-USER</code>链，比如有个容器已经做了3306端口与宿主机的3306端口互通，那么配置如下规则：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j DROP</span><br></pre></td></tr></table></figure></p><p>执行的效果就是只能1.1.1.1和2.2.2.2来访问该服务器的3306端口，其余IP一律drop掉。这里也要注意输入的顺序，因为iptables执行是从上往下的。</p><h2><span id="return的问题">RETURN的问题</span></h2><p>如果上面的规则如果变成了这样：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A DOCKER-USER -p all -j RETURN</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j DROP</span><br></pre></td></tr></table></figure></p><p>会不会达不到预期的要求？答曰不一定，在我这个例子里结果就是任何人都可以访问容器的3306端口。因为return退出的是当前CHIAN：如果当前CHIAN是别的CHAIN调用的子CHIAN（从一个CHAIN里可以jump到另一个CHAIN, jump到的那个CHAIN是子CHAIN），那么返回到调用点下一条规则处开始执行，如果当前CHIAN不是子CHAIN，那么就以默认策略执行。<code>iptables -nvL</code>看一下当前iptables的情况：<br><img src="/images/docker18.png" alt="akb48" title="图中我先把RETURN规则删掉了"></p><p>可以看出DOCKER-USER这个链是<code>1 references</code>，即它被一个默认链调用，被哪个默认链呢？<code>FORWARD</code>，当DOCKER-USER RETURN的时候回返回到FORWARD链里然后走下一个规则，而下一个规则是什么呢？是<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7893</span>K <span class="number">5610</span>M ACCEPT     all  --  *      docker0  <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            ctstate RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure></p><p>所以所有人都可以访问这个3306了。</p><h2><span id="没有docker-user">没有DOCKER-USER？</span></h2><p>DOCKER-USER这个链是Docker比较新的版本加上的，例子里的docker版本是version 18.06.1-ce, build e68fc7a。但是如果docker比较老的话，是不会默认生成这个链的，比如：<br><img src="/images/docker19.png" alt="akb48"></p><p>这种情况要么乖乖的升级docker，要么可以自定义创建iptables链。比如我们创建一个链，链名叫GITLAB，只让公司内部网络（115.200.239.106）访问GITLAB。</p><p>首先先<code>iptables -N GITLAB</code>，创建该链。然后<code>iptables -I GITLAB -p tcp --dport 443 -j DROP</code>和<code>iptables -I GITLAB -s 115.200.239.106 -j ACCEPT</code>创建给GITLAB链里添加两个访问规则达到只有指定IP访问443端口的目的。但是此时这个GITLAB链没有被任何任何默认链引用，所以即使配了规则也是无法匹配到任何报文的，所以我们要把它与FORWARD链链接起来，准许443端口可以转发，命令是<code>iptables -I FORWARD -p https --dport 443 -j GITLAB</code>，如图：<br><img src="/images/docker20.png" alt="akb48"></p><p>去浏览器里或者curl一下验证，的确只能指定IP才能访问GITLAB主页。不过，你以为现在就完事了么？非也，因为gitlab默认是通过https的形式拉取代码的，所以你还要把所有的代码服务器IP也要写进iptables里。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://docs.docker.com/network/iptables/" target="_blank" rel="noopener">https://docs.docker.com/network/iptables/</a><br><a href="https://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html" target="_blank" rel="noopener">https://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html</a><br><a href="http://kuntsung.blogspot.com/2012/10/iptables.html" target="_blank" rel="noopener">http://kuntsung.blogspot.com/2012/10/iptables.html</a><br><a href="https://www.zsythink.net/archives/1625" target="_blank" rel="noopener">https://www.zsythink.net/archives/1625</a></p>]]></content>
    
    <summary type="html">
    
      摆弄iptables的同时，小心别把自己锁在服务器外面。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>配置Intellij IDEA进行高效率运维开发</title>
    <link href="http://yoursite.com/2019/05/14/%E9%85%8D%E7%BD%AEintellij-IDEA%E8%AE%A9%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%9B%B4%E9%AB%98%E6%95%88%E7%8E%87/"/>
    <id>http://yoursite.com/2019/05/14/配置intellij-IDEA让运维开发更高效率/</id>
    <published>2019-05-14T08:58:50.000Z</published>
    <updated>2019-05-20T14:17:05.041Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>以前我写python用的是pycharm2018，但是发现我的pycharm里没有go插件，脱机安装也报错，于是乎我就干脆下载了一个interllij IDEA2019，打算把python、go、yaml文件都用它来编辑和管理。</p><h2><span id="配置python开发环境">配置python开发环境</span></h2><p>首先先去File–Settings–Plugins搜索python，下载对应插件，下载完毕之后需要重启IDE，重启完毕之后，<code>File--New--Module--Python</code>，选择对应的SDK即可。</p><p>若需要添加样式，还是在File–Settings–Editer–File and Code Templates里找到python script，增添文件的通用版面即可，如图：<br><img src="/images/intellij9.png" alt="akb48"></p><p>输出结果换行也很简单，在File–Settings–Editer–Console里，勾选<code>Use soft wraps in console</code>即可，如图：<br><img src="/images/intellij10.png" alt="akb48"></p><p>如果控制每行的长度，修改<code>Console commands history size</code>即可。</p><h2><span id="配置go开发环境">配置go开发环境</span></h2><p>首先安装go语言，配置好GOROOT和GOPATH，然后去File–Settings–Plugins搜索go，下载对应插件，下载完毕之后需要重启IDE，重启完毕之后，在<code>File--Settings--Languages &amp; Frameworks</code>里选择Go，配置好GOROOT和GOPATH。注意，GOPATH填的是Go的src文件地址。保存之后，就可以正常启动go文件了。</p><h2><span id="配置k8s-yaml开发环境">配置k8s yaml开发环境</span></h2><p>首先先去File–Settings–Plugins搜索yaml和kubernetes，下载对应的插件之后，直接创建新的project，就会自动补齐，如图：<br><img src="/images/intellij7.png" alt="akb48"></p><h2><span id="调节字体大小">调节字体大小</span></h2><p>调节菜单等字体大小：<code>File--Settings--Appearance &amp; Behavior--Appearance--Use custom font(Size)</code>，如图：<br><img src="/images/intellij6.png" alt="akb48"></p><p>调节代码的字体大小：<code>File--Settings--Font--Size</code>，如图：<br><img src="/images/intellij5.png" alt="akb48"></p><h2><span id="配置与远程服务器同步">配置与远程服务器同步</span></h2><p>写完了代码，总不能lrzsz的去上传到服务器里，我们要用一个优雅的方式去达到这个目的，首先在顶级菜单里选择<code>Tools--Deployment--Configuration</code>，点击+创建一个新的链接：<br><img src="/images/intellij3.png" alt="akb48"></p><p>检查可以成功连接到远程服务器之后，保存此链接。右键点击文件，选择<code>Deployment---Upload to XXX</code>，然后就可以看到上传成功。<br><img src="/images/intellij4.png" alt="akb48"></p><p>最后，分享两个比较柔和的xshell配色方案：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[Solarized Dark]</span><br><span class="line">text(bold)=<span class="number">839496</span></span><br><span class="line">magenta(bold)=<span class="number">6</span>c71c4</span><br><span class="line">text=<span class="number">839496</span></span><br><span class="line">white(bold)=fdf6e3</span><br><span class="line">green=<span class="number">859900</span></span><br><span class="line">red(bold)=cb4b16</span><br><span class="line">green(bold)=<span class="number">586e75</span></span><br><span class="line">black(bold)=<span class="number">073642</span></span><br><span class="line">red=dc322f</span><br><span class="line">blue=<span class="number">268</span>bd2</span><br><span class="line">black=<span class="number">002</span>b36</span><br><span class="line">blue(bold)=<span class="number">839496</span></span><br><span class="line">yellow(bold)=<span class="number">657</span>b83</span><br><span class="line">cyan(bold)=<span class="number">93</span>a1a1</span><br><span class="line">yellow=b58900</span><br><span class="line">magenta=dd3682</span><br><span class="line">background=<span class="number">042028</span></span><br><span class="line">white=eee8d5</span><br><span class="line">cyan=<span class="number">2</span>aa198</span><br><span class="line">[Names]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">name0=Solarized Dark</span><br></pre></td></tr></table></figure></p><p>将文件命名为solarized-dark.xcs文件，在xshell配色方案中导入该文件即可。颜色对比如下：<br><img src="/images/intellij8.png" alt="akb48" title="左边是柔和的，右边是默认的"></p><p>第二个方案如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mycolor]</span><br><span class="line">text(bold)=e9e9e9</span><br><span class="line">magenta(bold)=ff00ff</span><br><span class="line">text=00ff80</span><br><span class="line">white(bold)=fdf6e3</span><br><span class="line">green=80ff00</span><br><span class="line">red(bold)=ff0000</span><br><span class="line">green(bold)=3c5a38</span><br><span class="line">black(bold)=808080</span><br><span class="line">red=ff4500</span><br><span class="line">blue=00bfff</span><br><span class="line">black=000000</span><br><span class="line">blue(bold)=1e90ff</span><br><span class="line">yellow(bold)=ffff00</span><br><span class="line">cyan(bold)=00ffff</span><br><span class="line">yellow=c0c000</span><br><span class="line">magenta=c000c0</span><br><span class="line">background=042028</span><br><span class="line">white=c0c0c0</span><br><span class="line">cyan=00c0c0</span><br><span class="line">[Names]</span><br><span class="line">count=1</span><br><span class="line">name0=mycolor</span><br></pre></td></tr></table></figure></p><p>将此文件保存较mycolor.xcs，然后同上面一样导入即可。如果想要xshell自动加载此配色，需要将上面里所有mycolor改名叫Xterm，并且删除掉原有的Xterm配色方案，重启Xshell即看到效果。</p>]]></content>
    
    <summary type="html">
    
      lanyu激活码好像不好用了，只能先用免费的对付一个月...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="intellij idea" scheme="http://yoursite.com/tags/intellij-idea/"/>
    
  </entry>
  
  <entry>
    <title>使用Python GUI去将本地文件上传阿里云OSS</title>
    <link href="http://yoursite.com/2019/05/13/%E4%BD%BF%E7%94%A8Python-GUI%E5%8E%BB%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    <id>http://yoursite.com/2019/05/13/使用Python-GUI去将本地文件上传阿里云OSS/</id>
    <published>2019-05-13T11:51:31.000Z</published>
    <updated>2019-05-21T03:24:13.527Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>前端同事会甩过来一个zip包，然后我们需要将其解压，然后上传到阿里云OSS里对应的目录，为了提高效率，就用python 3写了一个GUI，如图：<br><img src="/images/tkinter3.png" alt="akb48" title="选择对应的zip包，然后选择目录"></p><p>具体代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 作者：ChrisChan</span></span><br><span class="line"><span class="comment"># 用途：使用GUI上传阿里云OSS</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.ttk <span class="keyword">as</span> ttk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox  <span class="comment"># 弹窗</span></span><br><span class="line"><span class="comment"># from tkinter import filedialog  # 选择单独文件</span></span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> askdirectory <span class="comment"># 选择文件夹</span></span><br><span class="line"><span class="keyword">import</span> oss2,os,sys,zipfile,time  <span class="comment">#引入zipfile解压</span></span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">"将桌面文件上传到阿里云国内线上OSS"</span>)   <span class="comment"># 窗体的标题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">confirm</span><span class="params">()</span>:</span></span><br><span class="line">    result = messagebox.askokcancel(<span class="string">"请确认"</span>, <span class="string">'''本地文件是：%s,对应OSS路径是：%s'''</span> % (filename,region1.get())) <span class="comment"># 前面是弹窗主题，后面是弹窗内容</span></span><br><span class="line">    Des_path = region1.get()</span><br><span class="line">    fileroot = filename.split(<span class="string">'.zip'</span>)[<span class="number">0</span>]    <span class="comment">#获取文件路径，不含.zip后缀</span></span><br><span class="line">    print(<span class="string">"上传zip包路径是:%s"</span> % fileroot)  <span class="comment"># 获取要上传的文件路径</span></span><br><span class="line">    print(<span class="string">"要解压的zip包名是:%s"</span> % filename)</span><br><span class="line">    print(<span class="string">"目标路径是:%s"</span> % Des_path)   <span class="comment"># 获取目的完整路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">        ak = <span class="string">"账号ak"</span></span><br><span class="line">        sk = <span class="string">"账号sk"</span>   <span class="comment"># 秘钥</span></span><br><span class="line">        auth = oss2.Auth(ak, sk)   <span class="comment"># 鉴权</span></span><br><span class="line">        ossBucket = oss2.Bucket(auth, <span class="string">'http://oss-cn-hangzhou.aliyuncs.com'</span>,Des_path)   <span class="comment"># 定义ossBucket</span></span><br><span class="line">        date = time.strftime(<span class="string">"%Y-%m-%d"</span>, time.localtime())  <span class="comment">#获取今天日期</span></span><br><span class="line">        <span class="comment">#解压缩zip包</span></span><br><span class="line">        zFile = zipfile.ZipFile(filename, <span class="string">"r"</span>)</span><br><span class="line">        <span class="keyword">for</span> fileM <span class="keyword">in</span> zFile.namelist():</span><br><span class="line">            zFile.extract(fileM, <span class="string">"D:\OSSback"</span>)</span><br><span class="line">        zFile.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件夹上传</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">uploadFile</span><span class="params">(file)</span>:</span></span><br><span class="line">            remoteName = file.replace(fileroot,<span class="string">''</span>).replace(<span class="string">'\\'</span>,<span class="string">'/'</span>)[<span class="number">1</span>:]     <span class="comment"># 将“/”去掉</span></span><br><span class="line">            print(<span class="string">'uploading...'</span>, file, <span class="string">'remoteName:'</span>, remoteName)</span><br><span class="line">            result = ossBucket.put_object_from_file(remoteName, file)</span><br><span class="line">            print(<span class="string">'http status: &#123;0&#125;'</span>.format(result.status))</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(dir)</span>:</span></span><br><span class="line">            fs = os.listdir(dir)</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> fs:</span><br><span class="line">                file = dir+<span class="string">"\\"</span>+f</span><br><span class="line">                <span class="keyword">if</span> os.path.isdir(file):</span><br><span class="line">                    list(file)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    uploadFile(file)</span><br><span class="line">        list(fileroot)   <span class="comment"># 开始上传</span></span><br><span class="line">        print(<span class="string">"目标文件夹里所有文件上传完毕！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#zip包改名</span></span><br><span class="line">        os.rename(filename,filename + date) <span class="comment">#按日期重命名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chooseZip</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> filename</span><br><span class="line">    filename = tk.filedialog.askopenfilename()    <span class="comment"># 选择单独的文件</span></span><br><span class="line">    <span class="keyword">if</span> filename != <span class="string">''</span>:</span><br><span class="line">        lb.config(text=<span class="string">"您选择的文件是："</span> + filename)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lb.config(text=<span class="string">"您没有选择任何文件"</span>)</span><br><span class="line"></span><br><span class="line">lb = tk.Label(window, text=<span class="string">''</span>)</span><br><span class="line">lb.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">btn = tk.Button(window, text=<span class="string">"选择要上传的文件"</span>, command=chooseZip)</span><br><span class="line">btn.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=tk.E, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">lb2 = tk.Label(window, text=<span class="string">'请选择上传地址'</span>)</span><br><span class="line">lb2.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">number = tk.StringVar()</span><br><span class="line">region1 = ttk.Combobox(window,width=<span class="number">35</span>,textvariable=number,state=<span class="string">'readonly'</span>)    <span class="comment">#下拉列表设置成为只读模式</span></span><br><span class="line">region1[<span class="string">'values'</span>] = (<span class="string">'resource-public/lccms'</span>,<span class="string">'resource-public/phoneAlarm'</span>,<span class="string">'resource-public/lcview'</span>,<span class="string">'resource-public/webFront/annualReport'</span>,<span class="string">'resource-public/webFront/cancellation'</span>,<span class="string">'resource-public/webFront/deviceShare'</span>,<span class="string">'resource-public/webFront/discoverNews'</span>,<span class="string">'resource-public/webFront/timeAlbum'</span>,<span class="string">'resource-public/chenchenchen'</span>)   <span class="comment">#下拉列表里面具体的元素</span></span><br><span class="line">region1.grid(row=<span class="number">2</span>,column=<span class="number">1</span>)</span><br><span class="line">region1.current(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">tk.Button(window, text=<span class="string">'上传'</span>, width=<span class="number">10</span>, command=confirm).grid(row=<span class="number">3</span>, column=<span class="number">0</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(window, text=<span class="string">'退出'</span>, width=<span class="number">10</span>, command=window.quit).grid(row=<span class="number">3</span>, column=<span class="number">1</span>, sticky=tk.E, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">tk.mainloop()</span><br></pre></td></tr></table></figure></p><p>整个过程还是出现一个gui界面，然后传入zip包，然后将其在源目录下解压缩，并且上传到选择的OSS路径里，上传成功后将原zip改名已做备份。</p><p>最后吐槽一下，阿里云OSS的SDK里是没有文件改名的功能，只能复制一份然后靠上传新的顶替掉原来老的内容，这样很不友善…所以我才选择将zip包保留在本地。</p>]]></content>
    
    <summary type="html">
    
      使用jumpserver连接服务器的时候出现Error reading SSH protocol banner错误的话，可能是系统用户没有推送的原因
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
      <category term="阿里云OSS" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    
      <category term="gui" scheme="http://yoursite.com/tags/gui/"/>
    
  </entry>
  
  <entry>
    <title>使用Python GUI去创建阿里云负载均衡</title>
    <link href="http://yoursite.com/2019/05/07/%E4%BD%BF%E7%94%A8python-GUI%E5%8E%BB%E5%88%9B%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2019/05/07/使用python-GUI去创建阿里云负载均衡/</id>
    <published>2019-05-07T06:17:04.000Z</published>
    <updated>2019-05-16T06:29:26.125Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>最近闲来无事研究了一下python3的gui，就用最基础的tkinter去做了一个购买阿里云负载均衡的脚本，先看一下效果：<br><img src="/images/tkinter1.png" alt="akb48" title="在对应的栏目里输入相应的值"></p><p>点击“确认”按钮之后，就会出现这样一个谈话框：<br><img src="/images/tkinter2.png" alt="akb48"></p><p>确认参数完毕之后，若点击取消则返回上一层页面修改，如果点击确认则进行购买。</p><p>这个脚本需要的基础知识可以去看一下莫烦大大的tkinter教学系列，地址是<a href="https://morvanzhou.github.io/tutorials/python-basic/tkinter/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/tkinter/</a> ，B站有全部的视频，不到10分钟一节课，还是很棒的。</p><h2><span id="脚本正文">脚本正文</span></h2><p>脚本内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#作者：ChrisChan</span></span><br><span class="line"><span class="comment">#用途：py3脚本，使用GUI购买阿里云SLB脚本</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.ttk <span class="keyword">as</span> ttk<span class="comment">#下拉式菜单</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox  <span class="comment">#弹窗</span></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ClientException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ServerException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515.CreateLoadBalancerRequest <span class="keyword">import</span> CreateLoadBalancerRequest</span><br><span class="line"></span><br><span class="line"><span class="comment">#秘钥集合</span></span><br><span class="line">aksk_A = [<span class="string">"第一个账号的ak"</span>,<span class="string">"第一个账号的sk"</span>]</span><br><span class="line">aksk_B = [<span class="string">"第2个账号的ak"</span>,<span class="string">"第2个账号的sk"</span>]</span><br><span class="line">aksk_C = [<span class="string">"第3个账号的ak"</span>,<span class="string">"第3个账号的sk"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个类可以建立负载均衡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateSlb</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ak,sk,domain)</span>:</span></span><br><span class="line">        self.ak = ak</span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.domain = domain</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,name,nettype)</span>:</span></span><br><span class="line">        client = AcsClient(self.ak,self.sk,self.domain)</span><br><span class="line">        request = CreateLoadBalancerRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        request.set_LoadBalancerSpec(<span class="string">"slb.s1.small"</span>)<span class="comment">#这里是负载均衡的规格，</span></span><br><span class="line">        request.set_LoadBalancerName(name)</span><br><span class="line">        request.set_AddressType(nettype)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        print(str(response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">window = tk.Tk()<span class="comment">#建立一个窗体</span></span><br><span class="line">window.title(<span class="string">"购买阿里云负载均衡"</span>)   <span class="comment">#窗体的标题</span></span><br><span class="line"></span><br><span class="line">Label1 = tk.Label(window, text=<span class="string">'请输入负载均衡名称:'</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">v1 = tk.StringVar()</span><br><span class="line">e1 = tk.Entry(window, textvariable=v1)</span><br><span class="line">e1.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)  <span class="comment"># 设置输入框显示的位置，以及长和宽属性</span></span><br><span class="line"></span><br><span class="line">l = tk.Label(window,bg=<span class="string">"yellow"</span>,width=<span class="number">20</span>,text=<span class="string">"默认值是1"</span>)</span><br><span class="line">l.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">parameter1 = tk.StringVar()</span><br><span class="line">l1 = tk.Label(window,bg=<span class="string">'pink'</span>,width=<span class="number">20</span>,height=<span class="number">5</span>,text=<span class="string">"请选择对应的阿里云账号"</span>)</span><br><span class="line">l1.grid(row=<span class="number">2</span>,column=<span class="number">1</span>,rowspan=<span class="number">3</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">parameter2 = tk.StringVar()</span><br><span class="line">l2 = tk.Label(window,bg=<span class="string">'yellow'</span>,width=<span class="number">20</span>,text=<span class="string">"请选择实例所在的地域"</span>)</span><br><span class="line">l2.grid(row=<span class="number">5</span>,column=<span class="number">1</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">parameter3 = tk.StringVar()</span><br><span class="line">l3 = tk.Label(window,bg=<span class="string">'green'</span>,width=<span class="number">20</span>,height=<span class="number">3</span>,text=<span class="string">"请选择网络类型"</span>)</span><br><span class="line">l3.grid(row=<span class="number">10</span>,column=<span class="number">1</span>,rowspan=<span class="number">2</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clickMe</span><span class="params">()</span>:</span></span><br><span class="line">    result = messagebox.askokcancel(<span class="string">"请确认"</span>, <span class="string">'''</span></span><br><span class="line"><span class="string">    负载均衡名称是：%s,对应账号是：%s,所在区域是：%s,网络类型是：%s</span></span><br><span class="line"><span class="string">    '''</span> % (v1.get(),parameter1.get(),region1.get(),parameter3.get())) <span class="comment">#前面是弹窗主题，后面是弹窗内容</span></span><br><span class="line">    name = v1.get()</span><br><span class="line">    nettype = parameter3.get()</span><br><span class="line">    domain = region1.get()</span><br><span class="line">    account = parameter1.get()</span><br><span class="line">    print(<span class="string">"负载均衡名称是：%s"</span> % name)  <span class="comment"># 获取用户输入的信息</span></span><br><span class="line">    print(<span class="string">"所在区域是：%s"</span> % domain)</span><br><span class="line">    print(<span class="string">"对应账号是：%s"</span> % account)</span><br><span class="line">    print(<span class="string">"网络类型是：%s"</span> % nettype)</span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> account == <span class="string">"A"</span>:</span><br><span class="line">            ak = aksk_A[<span class="number">0</span>]</span><br><span class="line">            sk = aksk_A[<span class="number">1</span>]</span><br><span class="line">            getSLB = CreateSlb(ak,sk,domain)    <span class="comment">#将类实例化</span></span><br><span class="line">            getSLB.create(name,nettype)<span class="comment">#执行购买函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> account == <span class="string">"B"</span>:</span><br><span class="line">            ak = aksk_B[<span class="number">0</span>]</span><br><span class="line">            sk = aksk_B[<span class="number">1</span>]</span><br><span class="line">            getSLB = CreateSlb(ak, sk, domain)  <span class="comment"># 将类实例化</span></span><br><span class="line">            getSLB.create(name,nettype)<span class="comment">#执行购买函数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ak = aksk_C[<span class="number">0</span>]</span><br><span class="line">            sk = aksk_C[<span class="number">1</span>]</span><br><span class="line">            getSLB = CreateSlb(ak, sk, domain)  <span class="comment"># 将类实例化</span></span><br><span class="line">            getSLB.create(name,nettype)<span class="comment">#执行购买函数</span></span><br><span class="line">        print(<span class="string">"购买完毕！"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_selection</span><span class="params">(v)</span>:</span></span><br><span class="line">    l.config(text=<span class="string">"当前选择的值是："</span> + v)   <span class="comment">#V就是传入值也是获取的长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_env</span><span class="params">()</span>:</span></span><br><span class="line">    l1.config(text=<span class="string">"你选择了"</span>+parameter1.get())  <span class="comment">#使用config功能去改变原有l的参数,把text变成了提取var1里的值</span></span><br><span class="line">    <span class="comment">#print(parameter1.get())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_region</span><span class="params">()</span>:</span></span><br><span class="line">    l2.config(text=<span class="string">"你选择了"</span>+region1.get())</span><br><span class="line">    <span class="comment">#print(parameter2.get())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_network</span><span class="params">()</span>:</span></span><br><span class="line">    l3.config(text=<span class="string">"你选择了"</span>+parameter3.get())</span><br><span class="line">    <span class="comment">#print(parameter3.get())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#选择环境</span></span><br><span class="line">env1 = tk.Radiobutton(window,text=<span class="string">"第一个账号"</span>,variable=parameter1,value=<span class="string">'A'</span>,command=get_env)</span><br><span class="line">env2 = tk.Radiobutton(window,text=<span class="string">"第2个账号"</span>,variable=parameter1,value=<span class="string">'B'</span>,command=get_env)</span><br><span class="line">env3 = tk.Radiobutton(window,text=<span class="string">"第3个账号"</span>,variable=parameter1,value=<span class="string">'C'</span>,command=get_env)</span><br><span class="line">env1.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">env2.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">env3.grid(row=<span class="number">4</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择地域，使用下拉列表</span></span><br><span class="line">number = tk.StringVar()</span><br><span class="line">region1 = ttk.Combobox(window,width=<span class="number">12</span>,textvariable=number,state=<span class="string">'readonly'</span>)    <span class="comment">#加入readonly，使下拉列表设置成为只读模式</span></span><br><span class="line">region1[<span class="string">'values'</span>] = (<span class="string">"cn-hangzhou"</span>,<span class="string">"cn-shenzhen"</span>,<span class="string">"eu-central-1"</span>,<span class="string">"ap-southeast-1"</span>,<span class="string">"cn-hongkong"</span>)   <span class="comment">#下拉列表里面具体的元素</span></span><br><span class="line">region1.grid(row=<span class="number">5</span>,column=<span class="number">0</span>)</span><br><span class="line">region1.current(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择内/外网</span></span><br><span class="line">network1 = tk.Radiobutton(window,text=<span class="string">"内网"</span>,variable=parameter3,value=<span class="string">'intranet'</span>,command=get_network)</span><br><span class="line">network2 = tk.Radiobutton(window,text=<span class="string">"外网"</span>,variable=parameter3,value=<span class="string">'internet'</span>,command=get_network)</span><br><span class="line">network1.grid(row=<span class="number">10</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">network2.grid(row=<span class="number">11</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#尺度区间</span></span><br><span class="line">s = tk.Scale(window,label=<span class="string">"想要多少台?"</span>,from_=<span class="number">1</span>,to=<span class="number">20</span>,orient=tk.HORIZONTAL,resolution=<span class="number">1</span>,command=print_selection)   </span><br><span class="line"><span class="comment">#HORIZONTAL横向,length的单位是像素,resolution单位是取小数还是取整</span></span><br><span class="line">s.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#提交按钮</span></span><br><span class="line">action = tk.Button(window, text=<span class="string">'确认提交'</span>,width=<span class="number">10</span>,command=clickMe)</span><br><span class="line">action.grid(row=<span class="number">12</span>, column=<span class="number">0</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(window, text=<span class="string">'退出程序'</span>,width=<span class="number">10</span>,command=window.quit).grid(row=<span class="number">12</span>, column=<span class="number">1</span>, sticky=tk.E, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">tk.mainloop()</span><br></pre></td></tr></table></figure></p><p>基本脚本的注释就已经讲明白了整个脚本执行的过程，简单说来就是界面输入对应的选项，再把这些选项传入到阿里云的api里达到购买负载均衡的目的。这里要注意一下，<code>thinker</code>布局只能从<code>pack</code>,<code>grid</code>,<code>place</code>里选择一种。</p><p>脚本就到此结束，后期再给这个脚本添加到对应的端口监听功能就完美了！</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.mierhuo.com/code/106" target="_blank" rel="noopener">https://www.mierhuo.com/code/106</a><br><a href="https://www.jianshu.com/p/5dfeb29aed7b" target="_blank" rel="noopener">https://www.jianshu.com/p/5dfeb29aed7b</a><br><a href="https://www.cnblogs.com/ruo-li-suo-yi/p/7425307.html" target="_blank" rel="noopener">https://www.cnblogs.com/ruo-li-suo-yi/p/7425307.html</a></p>]]></content>
    
    <summary type="html">
    
      如果发现activemq curl自己的8161端口timeout的情况，多半是activemq死了，重启可破之
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
      <category term="tkinter" scheme="http://yoursite.com/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>解决微信不支持阿里云OSS域名的问题</title>
    <link href="http://yoursite.com/2019/04/29/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E4%B8%8D%E6%94%AF%E6%8C%81%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%9F%9F%E5%90%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/04/29/解决微信不支持阿里云OSS域名的问题/</id>
    <published>2019-04-29T07:52:44.000Z</published>
    <updated>2019-04-29T11:08:03.983Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>阿里云OSS的元素（除了图片）是无法通过微信小程序/微信聊天直接打开的，会爆“已停止访问该网页”的错误，如图：<br><img src="/images/wechat1.jpg" alt="akb48"></p><p>但是复制url地址到手机浏览器是可以正常访问的，无疑这样对于用户来说是一个很不好的体验，因为腾讯屏蔽了阿里云的相关元素地址。所以为了解决这个问题，需要登录OSS后台，在对应的bucket里，点击“域名管理”，然后“绑定用户域名”，在里面输入一个域名即可。如果是HTTPS访问，还需要点击“证书托管”，把域名证书上传到阿里云OSS里，如图：<br><img src="/images/wechat2.jpg" alt="akb48"></p><p>这样就可以用自定义的域名去替代阿里云OSS的基础域名（<a href="http://XXXX.oss-cn-hangzhou.aliyuncs.com/），这样微信就可以正常打开了：" target="_blank" rel="noopener">http://XXXX.oss-cn-hangzhou.aliyuncs.com/），这样微信就可以正常打开了：</a><br><img src="/images/wechat3.jpg" alt="akb48"></p><p><img src="/images/字母哥被帽.gif" alt="akb48" title="字母哥惨遭两帽"></p>]]></content>
    
    <summary type="html">
    
      如果被nessus扫描出“RFC 4253建议不要使用Arcfour”的SSH弱算法漏洞，在sshd_config末尾添加Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc，然后重启ssh即可。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="阿里云oss" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91oss/"/>
    
  </entry>
  
  <entry>
    <title>获取阿里云RDS磁盘容量的脚本</title>
    <link href="http://yoursite.com/2019/04/28/%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91RDS%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/04/28/获取阿里云RDS磁盘容量的脚本/</id>
    <published>2019-04-28T08:16:48.000Z</published>
    <updated>2019-04-29T09:29:59.871Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="需求以及脚本正文">需求以及脚本正文</span></h2><p>开发人员提出一个需求，想要每天从企业微信号里获取一下阿里云几个RDS的今天和昨天的磁盘容量，对比一下结果来判断删除模块是否正常运行，由于阿里云的相关API不支持查询历史数据，所以我们要建立一个数据表，把磁盘容量按照日期保存在数据表里，这个table的结构如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下是创建databases的语句</span></span><br><span class="line">CREATE TABLE IF NOT EXISTS `onlinerds`(</span><br><span class="line">`id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">`rds_id` VARCHAR(<span class="number">100</span>) NOT NULL,<span class="comment">#记录数据库ID号</span></span><br><span class="line">`rds_name` VARCHAR(<span class="number">100</span>) NOT NULL,<span class="comment">#记录数据库名称</span></span><br><span class="line">`rds_diskused` VARCHAR(<span class="number">40</span>) NOT NULL,<span class="comment">#记录使用磁盘容量</span></span><br><span class="line">`date` VARCHAR(<span class="number">40</span>) NOT NULL,<span class="comment">#记录日期</span></span><br><span class="line">PRIMARY KEY ( `id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>有了这个table，于是就写了一个py3的脚本，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#这个py3脚本是用来获取阿里云线上数据库的磁盘容量</span></span><br><span class="line"><span class="comment">#pip install pymysql &amp; pip install aliyun-python-sdk-rds &amp; pip install aliyun-python-sdk-core</span></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ClientException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ServerException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkrds.request.v20140815.DescribeDBInstanceAttributeRequest <span class="keyword">import</span> DescribeDBInstanceAttributeRequest</span><br><span class="line"><span class="keyword">import</span> math,pymysql,urllib.request,json,datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典确定kv对应关系，这样可以取到服务器姓名</span></span><br><span class="line">dict = &#123;<span class="string">'第一台RDSid'</span>: <span class="string">"对应数据库名称"</span>,<span class="string">'第2台RDSid'</span>: <span class="string">"对应数据库名称"</span>，<span class="string">'第3台RDSid'</span>: <span class="string">"对应数据库名称"</span>，<span class="string">'4台RDSid'</span>: <span class="string">"对应数据库名称"</span>，<span class="string">'第5台RDSid'</span>: <span class="string">"对应数据库名称"</span>&#125;</span><br><span class="line"></span><br><span class="line">usedcap=[]<span class="comment">#今天磁盘量</span></span><br><span class="line">usedcap_yes=[]<span class="comment">#昨天磁盘量</span></span><br><span class="line">pro = []    <span class="comment">#比例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建获取磁盘容量的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getRDS</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ak,sk,domain)</span>:</span></span><br><span class="line">        self.ak = ak</span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.domain = domain</span><br><span class="line">        client = AcsClient(ak,sk,domain)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动换算单位</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertBytes</span><span class="params">(self,bytes,lst=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lst <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            lst = [<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>]  <span class="comment"># 这里是单位，如果需要TB，PB，在后面添加进去即可</span></span><br><span class="line">        i = int(math.floor(  <span class="comment"># 舍弃小数点，取小</span></span><br><span class="line">            math.log(bytes, <span class="number">1024</span>)  <span class="comment"># 求对数(对数：若 a**b = N 则 b 叫做以 a 为底 N 的对数)</span></span><br><span class="line">        ))</span><br><span class="line">        <span class="keyword">if</span> i &gt;= len(lst):</span><br><span class="line">            i = len(lst) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">'%.2f'</span> + <span class="string">" "</span> + lst[i]) % (bytes / math.pow(<span class="number">1024</span>, i))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DiskUsed</span><span class="params">(self,rdsid)</span>:</span></span><br><span class="line">        lst = [<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>]</span><br><span class="line">        client = AcsClient(self.ak,self.sk,self.domain)</span><br><span class="line">        request = DescribeDBInstanceAttributeRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        request.set_DBInstanceId(rdsid)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        result = str(response, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        data = json.loads(result)</span><br><span class="line">        DiskUsed = ((data)[<span class="string">'Items'</span>][<span class="string">'DBInstanceAttribute'</span>][<span class="number">0</span>][<span class="string">'DBInstanceDiskUsed'</span>])    <span class="comment">#获取当前使用磁盘</span></span><br><span class="line">        DiskTotal = ((data)[<span class="string">'Items'</span>][<span class="string">'DBInstanceAttribute'</span>][<span class="number">0</span>][<span class="string">'DBInstanceStorage'</span>])    <span class="comment">#获取总磁盘</span></span><br><span class="line">        DiskUsed_GB = getRDS.convertBytes(self,DiskUsed,lst=lst)<span class="comment">#使用“自动换算单位”的函数</span></span><br><span class="line">        DiskUsed_num = float(getRDS.convertBytes(self,DiskUsed,lst=lst).split(<span class="string">' '</span>, <span class="number">1</span>)[<span class="number">0</span>])    <span class="comment">#提取纯数字</span></span><br><span class="line">        Proportion = <span class="string">"%.2f%%"</span> % ((DiskUsed_num / DiskTotal) * <span class="number">100</span>)      <span class="comment">#转化成百分比</span></span><br><span class="line">        <span class="keyword">return</span> DiskUsed_GB,Proportion<span class="comment">#返回两个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取昨天的日期</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getYesterday</span><span class="params">()</span>:</span></span><br><span class="line">    today = datetime.date.today()</span><br><span class="line">    oneday = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">    yesterday = today-oneday</span><br><span class="line">    <span class="keyword">return</span> yesterday</span><br><span class="line"></span><br><span class="line"><span class="comment">#MYSQL录入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysql</span><span class="params">(i,usedcapacity)</span>:</span></span><br><span class="line">    db = pymysql.connect(<span class="string">"数据库地址"</span>, <span class="string">"数据库用户"</span>, <span class="string">"密码"</span>, <span class="string">"databases"</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">"INSERT INTO onlinerds (rds_id,rds_name,rds_diskused,date) VALUES ('%s','%s','%s',now())"</span> % (i,dict[i],usedcapacity)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql)        <span class="comment"># 执行sql语句</span></span><br><span class="line">        db.commit()         <span class="comment"># 执行sql语句</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        db.rollback()           <span class="comment"># 发生错误时回滚</span></span><br><span class="line">    db.close()  <span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取昨天的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yes_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(<span class="string">"数据库地址"</span>, <span class="string">"数据库用户"</span>, <span class="string">"密码"</span>, <span class="string">"databases"</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    yes_sql = <span class="string">"select rds_diskused from onlinerds where date like '%s"</span> % (getYesterday()) + <span class="string">" 20:%';"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(yes_sql)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line">        <span class="keyword">for</span> GB <span class="keyword">in</span> results:</span><br><span class="line">            aaa = GB[<span class="number">0</span>] <span class="comment">#增加一个aaa变量来调整格式</span></span><br><span class="line">            usedcap_yes.append(aaa)<span class="comment">#获取的数据添加到列表里</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Error: unable to fecth data"</span>)</span><br><span class="line">    db.close()  <span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将类实例化</span></span><br><span class="line">gethzRDS = getRDS(<span class="string">"杭州区ak"</span>,<span class="string">"杭州区sk"</span>,<span class="string">"cn-hangzhou"</span>)</span><br><span class="line">getszRDS = getRDS(<span class="string">"深圳区ak"</span>,<span class="string">"深圳区sk"</span>,<span class="string">"cn-shenzhen"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取企业微信token，用来发送微信企业号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(url, corpid, corpsecret)</span>:</span></span><br><span class="line">    token_url = <span class="string">'%s/cgi-bin/gettoken?corpid=%s&amp;corpsecret=%s'</span> % (url, corpid, corpsecret)</span><br><span class="line">    token = json.loads(urllib.request.urlopen(token_url).read().decode())[<span class="string">'access_token'</span>]</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建告警信息json，用来发送微信企业号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">messages</span><span class="params">(msg)</span>:</span></span><br><span class="line">    values = &#123;</span><br><span class="line">        <span class="string">"touser"</span>: <span class="string">'@all'</span>,</span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">'text'</span>,</span><br><span class="line">        <span class="string">"agentid"</span>: 微信企业号应用号码,</span><br><span class="line">        <span class="string">"text"</span>: &#123;<span class="string">'content'</span>: msg&#125;,</span><br><span class="line">        <span class="string">"safe"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    msges=(bytes(json.dumps(values), <span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> msges</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送告警信息，用来发送微信企业号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span><span class="params">(url, token, data)</span>:</span></span><br><span class="line">    send_url = <span class="string">'%s/cgi-bin/message/send?access_token=%s'</span> % (url, token)</span><br><span class="line">    respone = urllib.request.urlopen(urllib.request.Request(url=send_url, data=data)).read()</span><br><span class="line">    x = json.loads(respone.decode())[<span class="string">'errcode'</span>]</span><br><span class="line">    <span class="comment"># print(x)</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Success!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Failed'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list = [<span class="string">'第一台RDSid'</span>,<span class="string">'第2台RDSid'</span>,<span class="string">'第3台RDSid'</span>,<span class="string">'第4台RDSid'</span>,<span class="string">'第5台RDSid'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">        mysql(i,gethzRDS.DiskUsed(i))</span><br><span class="line">x,y = gethzRDS.DiskUsed(i)  <span class="comment">#函数return多个值，就这样拆开，一一添加到list里</span></span><br><span class="line">       usedcap.append(x)<span class="comment">#添加到列表</span></span><br><span class="line">       pro.append(y)<span class="comment">#添加到列表</span></span><br><span class="line">        <span class="keyword">print</span> (i+<span class="string">"  OKok!"</span>)<span class="comment">#证明已经录入到数据库里了</span></span><br><span class="line"></span><br><span class="line">    list = [<span class="string">'第一台RDSid'</span>,<span class="string">'第2台RDSid'</span>,<span class="string">'第3台RDSid'</span>,<span class="string">'第4台RDSid'</span>,<span class="string">'第5台RDSid'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">        mysql(i,getszRDS.DiskUsed(i))</span><br><span class="line">        x, y = getszRDS.DiskUsed(i)</span><br><span class="line">       usedcap.append(x)</span><br><span class="line">       pro.append(y)</span><br><span class="line">        <span class="keyword">print</span> (i+<span class="string">"  OKok!"</span>)</span><br><span class="line"></span><br><span class="line">    yes_mysql()</span><br><span class="line">    print(usedcap)</span><br><span class="line">    print(usedcap_yes)</span><br><span class="line"></span><br><span class="line">    corpid = <span class="string">'微信企业号corpid'</span></span><br><span class="line">    corpsecret = <span class="string">'微信企业号应用的秘钥'</span></span><br><span class="line">    url = <span class="string">'https://qyapi.weixin.qq.com'</span></span><br><span class="line">    msg  = <span class="string">'''【第一台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第2台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第3台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第4台数据库】此时此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第5台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    '''</span> % (usedcap[<span class="number">0</span>],usedcap_yes[<span class="number">0</span>],pro[<span class="number">0</span>],usedcap[<span class="number">1</span>],usedcap_yes[<span class="number">1</span>],pro[<span class="number">1</span>],usedcap[<span class="number">2</span>],usedcap_yes[<span class="number">2</span>],pro[<span class="number">2</span>],usedcap[<span class="number">3</span>],usedcap_yes[<span class="number">3</span>],pro[<span class="number">3</span>],usedcap[<span class="number">4</span>],usedcap_yes[<span class="number">4</span>],pro[<span class="number">4</span>],usedcap[<span class="number">5</span>],usedcap_yes[<span class="number">5</span>],pro[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发送微信告警</span></span><br><span class="line">    test_token = get_token(url, corpid, corpsecret)</span><br><span class="line">    msg_data = messages(msg)</span><br><span class="line">send_message(url, test_token, msg_data)</span><br></pre></td></tr></table></figure></p><p>执行之后，效果如下：<br><img src="/images/getRDS.png" alt="akb48"></p><h2><span id="小数和百分数的相互转换">小数和百分数的相互转换</span></h2><p>百分比转换为小数的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'20%'</span>  <span class="comment"># 默认要转换的百分比是字符串</span></span><br><span class="line">aa = float(s.strip(<span class="string">'%'</span>)) <span class="comment"># 去掉s 字符串中的 %</span></span><br><span class="line">bb = aa/<span class="number">100.0</span>  <span class="comment">#运行环境是Python2.7   其中Python2.X  与 python 3X中的除法是有区别</span></span><br><span class="line"><span class="keyword">print</span> bb<span class="comment"># 输出结果是 0.2</span></span><br></pre></td></tr></table></figure></p><p>小数转换为百分比的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0.3214323</span></span><br><span class="line">bb = <span class="string">"%.2f%%"</span> % (a * <span class="number">100</span>)</span><br><span class="line"><span class="keyword">print</span> bb<span class="comment"># 输出结果是32.14%</span></span><br></pre></td></tr></table></figure></p><h2><span id="如果函数返回了多个值">如果函数返回了多个值</span></h2><p>如果函数一次性return了多个值，如何单独获取到这些值？其实这个函数返回的是一个元组。把元组解包，返回结果也可以赋值给单个变量，这时候这个变量值就是函数返回的那个元组本身了。如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, c = myfun()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2><span id="智能转换存储单位">智能转换存储单位</span></h2><p>智能转换<code>bytes</code>为<code>kb/mb/gb/tb/pb</code>的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertBytes</span><span class="params">(bytes, lst=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> lst <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        lst=[<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>, <span class="string">'TB'</span>, <span class="string">'PB'</span>]</span><br><span class="line">    i = int(math.floor( <span class="comment"># 舍弃小数点，取小</span></span><br><span class="line">             math.log(bytes, <span class="number">1024</span>) <span class="comment"># 求对数(对数：若 a**b = N 则 b 叫做以 a 为底 N 的对数)</span></span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i &gt;= len(lst):</span><br><span class="line">        i = len(lst) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">'%.2f'</span> + <span class="string">" "</span> + lst[i]) % (bytes/math.pow(<span class="number">1024</span>, i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    lst = [<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>, <span class="string">'TB'</span>, <span class="string">'PB'</span>]</span><br><span class="line">    bytes = input(<span class="string">'Bytes: '</span>)</span><br><span class="line">    <span class="keyword">print</span> convertBytes(bytes, lst=lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>但是要注意！<code>bytes</code>作为传入值不能为负数，所以如果是负数想要转换单位，先要用<code>abs</code>取绝对值再计算。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.cnblogs.com/xuchunlin/p/6305720.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuchunlin/p/6305720.html</a><br><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c07/p04_return_multiple_values_from_function.html" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/zh_CN/latest/c07/p04_return_multiple_values_from_function.html</a><br><a href="https://my.oschina.net/guoenzhou/blog/2989650" target="_blank" rel="noopener">https://my.oschina.net/guoenzhou/blog/2989650</a></p>]]></content>
    
    <summary type="html">
    
      用类一时爽，一直用类一直爽！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
</feed>
